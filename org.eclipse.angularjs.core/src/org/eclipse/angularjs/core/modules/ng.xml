<module name="ng">

	<!-- See http://docs.angularjs.org/api/ng -->

	<directive name="ngApp"
		url="http://docs.angularjs.org/api/ng.directive:ngApp"
		type="module" >
		<description>
		<![CDATA[
			Use this directive to auto-bootstrap an AngularJS
			application. The
			ngApp directive designates the root element of the
			application and is
			typically placed near the root element of the page
			- e.g. on the
			<body>
			or
			<html> tags.
			]]>
		</description>
	</directive>

	<directive name="ngBlur"
		url="http://docs.angularjs.org/api/ng.directive:ngBlur" 
		tags="window, input, select, textarea">
		<description>
		<![CDATA[
			Specify custom behavior on blur event.
			]]>
		</description>
	</directive>

	<directive name="ngChange"
		url="http://docs.angularjs.org/api/ng.directive:ngChange" 
		tags="input">
		<description>
				<![CDATA[
			Evaluate given expression when user changes the input.
			The expression is not evaluated when the value change is coming from
			the model.

			Note, this directive requires ngModel to be present.
			]]>
		</description>
	</directive>

	<directive name="ngClick"
		url="http://docs.angularjs.org/api/ng.directive:ngClick">
		<description>
				<![CDATA[
The ngClick directive allows you to specify custom behavior when an element is clicked.]]>
		</description>
	</directive>

	<directive name="ngController"
		url="http://docs.angularjs.org/api/ng.directive:ngController"
		type="controller"  >
		<description>
		<![CDATA[
			<p>The <code>ngController</code> directive attaches a controller class to the view. This is a key aspect of how angular
supports the principles behind the Model-View-Controller design pattern.</p>
<p>MVC components in angular:</p>
<ul>
<li>Model — The Model is scope properties; scopes are attached to the DOM where scope properties
are accessed through bindings.</li>
<li>View — The template (HTML with data bindings) that is rendered into the View.</li>
<li>Controller — The <code>ngController</code> directive specifies a Controller class; the class contains business
logic behind the application to decorate the scope with functions and values</li>
</ul>
<p>Note that you can also attach controllers to the DOM by declaring it in a route definition
via the <a href="api/ngRoute.$route">$route</a> service. A common mistake is to declare the controller
again using <code>ng-controller</code> in the template itself.  This will cause the controller to be attached
and executed twice.</p>
]]>
		</description>
	</directive>

	<directive name="ngModel"
		url="http://docs.angularjs.org/api/ng.directive:ngModel" tags="input, select, textarea"
		type="model" >
		<description>
			The ngModel directive binds an input,select, textarea (or
			custom form control) to a property on the scope using
			NgModelController, which is created and exposed by this directive.
		</description>
	</directive>

	<directive name="ngRepeat"
		url="http://docs.angularjs.org/api/ng.directive:ngRepeat">
		<description>
		<![CDATA[
			The ngRepeat directive instantiates a template once per item from a collection. Each template instance gets its own scope, where the given loop variable is set to the current collection item, and $index is set to the item index or key.
			]]>
		</description>
	</directive>

	<directive name="ngSubmit"
		url="http://docs.angularjs.org/api/ng.directive:ngSubmit" tags="form">
		<description>
		<![CDATA[
			Enables binding angular expressions to onsubmit events.

Additionally it prevents the default action (which for form means sending the request to the server and reloading the current page) but only if the form does not contain an action attribute.
			]]>
		</description>
	</directive>

</module>