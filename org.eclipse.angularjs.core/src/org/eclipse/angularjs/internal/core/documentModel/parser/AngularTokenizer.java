/* The following code was generated by JFlex 1.2.2 on 15/11/13 15:46 */

/*******************************************************************************
 * Copyright (c) 2004, 2013 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *     Frits Jalvingh - contributions for bug 150794
 *******************************************************************************/

package org.eclipse.angularjs.internal.core.documentModel.parser;

import java.io.CharArrayReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.angularjs.internal.core.Logger;
import org.eclipse.angularjs.internal.core.documentModel.parser.IntStack;
import org.eclipse.angularjs.internal.core.documentModel.parser.AngularRegionContext;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockMarker;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockTokenizer;
import org.eclipse.wst.sse.core.internal.ltk.parser.TagMarker;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegion;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegionList;
import org.eclipse.wst.sse.core.internal.util.Debug;
import org.eclipse.wst.sse.core.utils.StringUtils;
import org.eclipse.wst.xml.core.internal.parser.ContextRegionContainer;
import org.eclipse.wst.xml.core.internal.regions.DOMRegionContext;


/**
 * This class is a scanner generated by 
 * <a href="http://www.informatik.tu-muenchen.de/~kleing/jflex/">JFlex</a> 1.2.2
 * on 15/11/13 15:46 from the specification file
 * <tt>file:/C:/Documents and Settings/azerr/git/angularjs-eclipse/org.eclipse.freemarker.core/Resource/parserTools/highlighting/AngularTokenizer.jflex</tt>
 */
public class AngularTokenizer implements BlockTokenizer, DOMRegionContext, AngularRegionContext {

  /** this character denotes the end of file */
  final public static int YYEOF = -1;

  /** lexical states */
  final public static int ST_ANGULAR_VBL_DQUOTES = 32;
  final public static int ST_ANGULAR_VBL_SQUOTES = 32;
  final public static int ST_XML_COMMENT_END = 4;
  final public static int ST_ANGULAR_VBL = 32;
  final public static int ST_BLOCK_TAG_SCAN = 31;
  final public static int ST_DHTML_ATTRIBUTE_VALUE = 14;
  final public static int ST_XML_PI_ATTRIBUTE_NAME = 8;
  final public static int ST_ANGULAR_ATTRIBUTE_VALUE = 33;
  final public static int ST_DHTML_TAG_CLOSE = 15;
  final public static int ST_XML_ATTRIBUTE_VALUE_DQUOTED = 35;
  final public static int ST_DHTML_EQUALS = 13;
  final public static int ST_XML_PI_ATTRIBUTE_VALUE = 10;
  final public static int ST_XML_ATTRIBUTE_VALUE = 20;
  final public static int ST_ANGULAR_VBL_SQUOTES_END = 32;
  final public static int ST_XML_ATTRIBUTE_VALUE_SQUOTED = 34;
  final public static int ST_XML_ATTRIBUTE_NAME = 18;
  final public static int ST_ANGULAR_SQUOTED_VBL = 32;
  final public static int ST_XML_EQUALS = 19;
  final public static int YYINITIAL = 0;
  final public static int ST_XML_DOCTYPE_ID_SYSTEM = 26;
  final public static int ST_XML_ELEMENT_DECLARATION = 27;
  final public static int ST_XML_DECLARATION_CLOSE = 22;
  final public static int ST_XML_DOCTYPE_DECLARATION = 23;
  final public static int ST_ANGULAR_DQUOTED_EL = 32;
  final public static int ST_CDATA_END = 2;
  final public static int ST_PI_WS = 6;
  final public static int ST_CDATA_TEXT = 1;
  final public static int ST_XML_ELEMENT_DECLARATION_CONTENT = 28;
  final public static int ST_XML_ATTLIST_DECLARATION = 29;
  final public static int ST_ANGULAR_SQUOTED_EL = 32;
  final public static int ST_XML_PI_EQUALS = 9;
  final public static int ST_XML_ATTLIST_DECLARATION_CONTENT = 30;
  final public static int ST_ANGULAR_VBL_DQUOTES_END = 32;
  final public static int ST_XML_DOCTYPE_ID_PUBLIC = 25;
  final public static int ST_DHTML_ATTRIBUTE_NAME = 12;
  final public static int ST_ANGULAR_DQUOTED_VBL = 32;
  final public static int ST_ANGULAR_EXPRESSION_CONTENT = 16;
  final public static int ST_ABORT_EMBEDDED = 32;
  final public static int ST_XML_DOCTYPE_EXTERNAL_ID = 24;
  final public static int ST_PI_CONTENT = 7;
  final public static int ST_BLOCK_TAG_INTERNAL_SCAN = 32;
  final public static int ST_PI = 5;
  final public static int ST_XML_DECLARATION = 21;
  final public static int ST_XML_TAG_NAME = 17;
  final public static int ST_XML_PI_TAG_CLOSE = 11;
  final public static int ST_XML_COMMENT = 3;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\5\1\22\2\0\1\14\22\0\1\14\1\21\1\11\1\55"+
    "\1\70\1\17\1\12\1\13\1\16\1\16\1\16\1\16\1\16\1\7"+
    "\1\6\1\3\12\15\1\10\1\61\1\1\1\45\1\2\1\4\1\16"+
    "\1\34\1\62\1\32\1\33\1\50\1\57\1\36\1\36\1\42\1\36"+
    "\1\36\1\27\1\25\1\44\1\43\1\47\1\36\1\40\1\56\1\35"+
    "\1\60\2\36\1\23\1\46\1\36\1\31\1\0\1\20\1\0\1\10"+
    "\1\0\1\52\1\62\1\63\1\53\1\37\1\57\1\36\1\71\1\42"+
    "\2\36\1\30\1\26\1\44\1\43\1\47\1\36\1\40\1\41\1\51"+
    "\1\60\1\36\1\36\1\24\1\54\1\36\1\66\1\0\1\67\71\0"+
    "\1\65\10\0\27\64\1\0\37\64\1\0\72\64\2\0\13\64\2\0"+
    "\10\64\1\0\65\64\1\0\104\64\11\0\44\64\3\0\2\64\4\0"+
    "\36\64\70\0\131\64\22\0\7\64\16\0\2\65\56\0\106\65\32\0"+
    "\2\65\44\0\1\64\1\65\3\64\1\0\1\64\1\0\24\64\1\0"+
    "\54\64\1\0\7\64\3\0\1\64\1\0\1\64\1\0\1\64\1\0"+
    "\1\64\1\0\22\64\15\0\14\64\1\0\102\64\1\0\14\64\1\0"+
    "\44\64\1\0\4\65\11\0\65\64\2\0\2\64\2\0\2\64\3\0"+
    "\34\64\2\0\10\64\2\0\2\64\67\0\46\64\2\0\1\64\7\0"+
    "\46\64\12\0\21\65\1\0\27\65\1\0\3\65\1\0\1\65\1\0"+
    "\2\65\1\0\1\65\13\0\33\64\5\0\3\64\56\0\32\64\5\0"+
    "\1\65\12\64\10\65\15\0\12\65\6\0\1\65\107\64\2\0\5\64"+
    "\1\0\17\64\1\0\4\64\1\0\1\64\17\65\2\64\2\65\1\0"+
    "\4\65\2\0\12\65\u0207\0\3\65\1\0\65\64\2\0\1\65\1\64"+
    "\20\65\3\0\4\65\3\0\12\64\2\65\2\0\12\65\21\0\3\65"+
    "\1\0\10\64\2\0\2\64\2\0\26\64\1\0\7\64\1\0\1\64"+
    "\3\0\4\64\2\0\1\65\1\0\7\65\2\0\2\65\2\0\3\65"+
    "\11\0\1\65\4\0\2\64\1\0\3\64\2\65\2\0\12\65\2\64"+
    "\20\0\1\65\2\0\6\64\4\0\2\64\2\0\26\64\1\0\7\64"+
    "\1\0\2\64\1\0\2\64\1\0\2\64\2\0\1\65\1\0\5\65"+
    "\4\0\2\65\2\0\3\65\13\0\4\64\1\0\1\64\7\0\12\65"+
    "\2\65\3\64\14\0\3\65\1\0\7\64\1\0\1\64\1\0\3\64"+
    "\1\0\26\64\1\0\7\64\1\0\2\64\1\0\5\64\2\0\1\65"+
    "\1\64\10\65\1\0\3\65\1\0\3\65\22\0\1\64\5\0\12\65"+
    "\21\0\3\65\1\0\10\64\2\0\2\64\2\0\26\64\1\0\7\64"+
    "\1\0\2\64\2\0\4\64\2\0\1\65\1\64\6\65\3\0\2\65"+
    "\2\0\3\65\10\0\2\65\4\0\2\64\1\0\3\64\4\0\12\65"+
    "\22\0\2\65\1\0\6\64\3\0\3\64\1\0\4\64\3\0\2\64"+
    "\1\0\1\64\1\0\2\64\3\0\2\64\3\0\3\64\3\0\10\64"+
    "\1\0\3\64\4\0\5\65\3\0\3\65\1\0\4\65\11\0\1\65"+
    "\17\0\11\65\21\0\3\65\1\0\10\64\1\0\3\64\1\0\27\64"+
    "\1\0\12\64\1\0\5\64\4\0\7\65\1\0\3\65\1\0\4\65"+
    "\7\0\2\65\11\0\2\64\4\0\12\65\22\0\2\65\1\0\10\64"+
    "\1\0\3\64\1\0\27\64\1\0\12\64\1\0\5\64\4\0\7\65"+
    "\1\0\3\65\1\0\4\65\7\0\2\65\7\0\1\64\1\0\2\64"+
    "\4\0\12\65\22\0\2\65\1\0\10\64\1\0\3\64\1\0\27\64"+
    "\1\0\20\64\4\0\6\65\2\0\3\65\1\0\4\65\11\0\1\65"+
    "\10\0\2\64\4\0\12\65\221\0\56\64\1\0\1\64\1\65\2\64"+
    "\7\65\5\0\6\64\1\65\10\65\1\0\12\65\47\0\2\64\1\0"+
    "\1\64\2\0\2\64\1\0\1\64\2\0\1\64\6\0\4\64\1\0"+
    "\7\64\1\0\3\64\1\0\1\64\1\0\1\64\2\0\2\64\1\0"+
    "\2\64\1\0\1\64\1\65\2\64\6\65\1\0\2\65\1\64\2\0"+
    "\5\64\1\0\1\65\1\0\6\65\2\0\12\65\76\0\2\65\6\0"+
    "\12\65\13\0\1\65\1\0\1\65\1\0\1\65\4\0\2\65\10\64"+
    "\1\0\41\64\7\0\24\65\1\0\6\65\4\0\6\65\1\0\1\65"+
    "\1\0\25\65\3\0\7\65\1\0\1\65\346\0\46\64\12\0\47\64"+
    "\11\0\1\64\1\0\2\64\1\0\3\64\1\0\1\64\1\0\2\64"+
    "\1\0\5\64\51\0\1\64\1\0\1\64\1\0\1\64\13\0\1\64"+
    "\1\0\1\64\1\0\1\64\3\0\2\64\3\0\1\64\5\0\3\64"+
    "\1\0\1\64\1\0\1\64\1\0\1\64\1\0\1\64\3\0\2\64"+
    "\3\0\2\64\1\0\1\64\50\0\1\64\11\0\1\64\2\0\1\64"+
    "\2\0\2\64\7\0\2\64\1\0\1\64\1\0\7\64\50\0\1\64"+
    "\4\0\1\64\10\0\1\64\u0c06\0\234\64\4\0\132\64\6\0\26\64"+
    "\2\0\6\64\2\0\46\64\2\0\6\64\2\0\10\64\1\0\1\64"+
    "\1\0\1\64\1\0\1\64\1\0\37\64\2\0\65\64\1\0\7\64"+
    "\1\0\1\64\3\0\3\64\1\0\7\64\3\0\4\64\2\0\6\64"+
    "\4\0\15\64\5\0\3\64\1\0\7\64\323\0\15\65\4\0\1\65"+
    "\104\0\1\64\3\0\2\64\2\0\1\64\121\0\3\64\u0e82\0\1\65"+
    "\1\0\1\64\31\0\11\64\6\65\1\0\5\65\13\0\124\64\4\0"+
    "\2\65\2\0\2\65\2\0\132\64\1\0\3\65\6\0\50\64\u1cd3\0"+
    "\u51a6\64\u0c5a\0\u2ba4\64\134\0\u0800\0\u1ffe\0\2\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    58,   116,   174,   232,   290,   348,   406,   464,   522, 
      580,   638,   696,   754,   812,   870,   928,   986,  1044,  1102, 
     1160,  1218,  1276,  1334,  1392,  1450,  1508,  1566,  1624,  1682, 
     1740,  1798,  1856,  1914,  1972,  2030,  2088,  2146,  2204,  2262, 
     2320,  2378,  2436,  2494,  2378,  2436,  2552,  2378,  2494,  2378, 
     2436,  2494,  2610,  2668,  2726,  2784,  2842,  2900,  2958,  3016, 
     2378,  2436,  3074,  2494,  3132,  3190,  2378,  3248,  3248,  3306, 
     3364,  3422,  3480,  3074,  2378,  3538,  3596,  2378,  3654,  3712, 
     3770,  3828,  3886,  2378,  2436,  2494,  3944,  4002,  4060,  2378, 
     4118,  4176,  4234,  4292,  4350,  2378,  4408,  4466,  4524,  4582, 
     4640,  4698,  2378,  4756,  4814,  4872,  4930,  4988,  5046,  5104, 
     5162,  5162,  5220,  5278,  5336,  5394,  5452,  5452,  5510,  5568, 
     5626,  5684,  5742,  5742,  5800,  5858,  5916,  5974,  6032,  2378, 
     6090,  6148,  6148,  6206,  6264,  6322,  6380,  6438,  2378,  6496, 
     2378,  2436,  2494,  6554,  4466,  6612,  6670,  6728,  6786,  6844, 
     6902,  2378,  6960,  7018,  7076,  2378,  2378,  2378,  7134,  7192, 
     7250,  7308,  7366,  7424,  2378,  7482,  7540,  7598,  2378,  7656, 
     7714,  7772,  2378,  2378,  3248,  3364,  2378,  3422,  3248,  3538, 
     3654,  3712,  7830,  3770,  2378,  7888,  3828,  3654,  2378,  2378, 
     7946,  4408,  8004,  4582,  2378,  4640,  7134,  8062,  8120,  8178, 
     4930,  2378,  8236,  8294,  5162,  5220,  2378,  8352,  8410,  8468, 
     5336,  5162,  5162,  5452,  5510,  2378,  5568,  5626,  5452,  5452, 
     5742,  5800,  2378,  8526,  8584,  8642,  5742,  8700,  5974,  6148, 
     6206,  2378,  8758,  8816,  8874,  6148,  8932,  6380,  6554,  6670, 
     2378,  6728,  2378,  8990,  9048,  9106,  9164,  2378,  9222,  9280, 
     2088,  2378,  2378,  2784,  9338,  9396,  9454,  9512,  9570,  9628, 
     9686,  9744,  9744,  9802,  9802,  9860,  9918,  9918,  9976,  2378, 
    10034, 10092,  2378, 10150, 10208, 10266, 10324, 10382, 10440, 10498, 
    10556,  8468,  8642, 10614,  8874, 10672, 10730, 10788, 10846, 10904, 
    10962, 11020, 11078, 11136, 11194, 11252, 11310, 11368,  2784, 11426, 
    11484, 11542,  2378,  2378, 11600, 11658, 11716, 11774,  2378,  2378, 
     2378, 11832, 11890, 11948, 12006, 12064, 12122,  2378, 12180,  5974, 
     6380, 12238, 12296, 12354, 12412,  2784
  };

  /** 
   * The packed transition table of the DFA
   */
  final private static String yy_packed = 
    "\1\45\1\46\10\45\1\47\4\45\1\50\46\45\1\51"+
    "\3\45\1\52\1\53\64\52\1\54\3\52\1\55\1\56"+
    "\16\55\1\57\1\55\1\60\43\55\1\61\3\55\1\62"+
    "\1\63\64\62\1\64\3\62\1\55\1\56\5\55\1\65"+
    "\12\55\1\60\43\55\1\61\4\55\1\56\2\55\1\66"+
    "\1\67\2\55\1\70\3\55\1\67\5\55\1\67\1\71"+
    "\1\72\4\70\1\55\10\70\1\73\2\70\1\55\7\70"+
    "\1\55\3\70\1\55\3\70\1\55\1\61\2\55\1\70"+
    "\1\55\1\56\2\55\1\66\1\74\6\55\1\74\5\55"+
    "\1\74\43\55\1\61\3\55\1\75\1\76\2\75\1\77"+
    "\15\75\1\60\43\75\1\100\3\75\1\55\1\56\2\55"+
    "\1\101\1\67\2\55\1\102\3\55\1\67\5\55\1\67"+
    "\6\102\1\55\13\102\1\55\7\102\1\55\3\102\1\55"+
    "\3\102\1\55\1\61\2\55\1\102\1\55\1\56\2\55"+
    "\1\101\1\67\2\55\1\102\3\55\1\67\5\55\1\67"+
    "\6\102\1\55\13\102\1\103\7\102\1\55\3\102\1\55"+
    "\3\102\1\55\1\61\2\55\1\102\1\104\1\56\1\55"+
    "\1\105\1\106\1\67\3\104\1\107\1\104\1\110\1\67"+
    "\5\104\1\67\43\104\1\111\3\104\1\55\1\56\2\55"+
    "\1\112\15\55\1\60\43\55\1\61\4\55\1\56\1\113"+
    "\1\114\1\55\1\67\2\55\1\115\3\55\1\67\5\55"+
    "\1\67\6\115\1\55\13\115\1\55\7\115\1\55\3\115"+
    "\1\55\3\115\1\55\1\61\2\55\1\115\1\55\1\56"+
    "\1\113\1\114\1\55\1\67\2\55\1\115\3\55\1\67"+
    "\5\55\1\67\6\115\1\55\13\115\1\116\7\115\1\55"+
    "\3\115\1\55\3\115\1\55\1\61\2\55\1\115\1\117"+
    "\1\56\1\113\1\120\1\117\1\67\3\117\1\121\1\117"+
    "\1\122\1\67\5\117\1\67\43\117\1\123\3\117\1\55"+
    "\1\56\3\55\1\67\6\55\1\67\5\55\1\67\43\55"+
    "\1\61\3\55\1\124\1\125\64\124\1\126\1\127\2\124"+
    "\1\130\1\131\1\132\1\133\4\130\1\134\12\130\6\135"+
    "\1\130\13\135\1\130\7\135\1\130\3\135\1\130\3\135"+
    "\4\130\1\135\1\55\1\136\1\132\1\133\1\55\1\67"+
    "\2\55\1\137\3\55\1\67\5\55\1\67\6\137\1\55"+
    "\13\137\1\55\7\137\1\55\3\137\1\55\3\137\1\55"+
    "\1\61\2\55\1\137\1\55\1\136\1\132\1\133\1\55"+
    "\1\67\2\55\1\137\3\55\1\67\5\55\1\67\6\137"+
    "\1\55\13\137\1\140\7\137\1\55\3\137\1\55\3\137"+
    "\1\55\1\61\2\55\1\137\1\141\1\142\1\132\1\143"+
    "\1\141\1\67\3\141\1\144\1\141\1\145\1\67\5\141"+
    "\1\67\47\141\1\55\1\146\1\147\2\55\1\67\6\55"+
    "\1\67\5\55\1\67\10\55\1\150\1\151\2\55\1\152"+
    "\10\55\1\152\1\55\1\151\1\150\12\55\1\61\4\55"+
    "\1\56\1\147\2\55\1\67\6\55\1\67\5\55\1\67"+
    "\6\55\1\153\34\55\1\61\4\55\1\56\1\147\2\55"+
    "\1\67\2\55\1\154\3\55\1\67\5\55\1\67\6\154"+
    "\1\153\13\154\1\55\7\154\1\55\3\154\1\55\3\154"+
    "\1\55\1\61\2\55\1\154\1\55\1\56\1\147\2\55"+
    "\1\67\6\55\1\67\5\55\1\67\6\55\1\153\7\55"+
    "\1\155\5\55\1\156\6\55\1\155\7\55\1\61\3\55"+
    "\1\157\1\56\1\147\1\160\1\157\1\67\3\157\1\161"+
    "\1\157\1\162\1\67\5\157\1\67\6\157\1\163\34\157"+
    "\1\164\3\157\1\165\1\56\1\147\1\166\1\165\1\67"+
    "\3\165\1\167\1\165\1\170\1\67\5\165\1\67\6\165"+
    "\1\171\34\165\1\172\3\165\1\173\1\56\1\147\1\174"+
    "\1\173\1\67\3\173\1\175\1\173\1\176\1\67\5\173"+
    "\1\67\43\173\1\177\3\173\1\200\1\201\1\202\63\200"+
    "\1\203\3\200\1\204\1\56\1\147\1\205\1\204\1\67"+
    "\3\204\1\206\1\204\1\207\1\67\5\204\1\67\43\204"+
    "\1\210\3\204\1\211\1\212\1\213\63\211\1\214\3\211"+
    "\1\215\1\216\64\215\1\217\3\215\1\55\1\56\20\55"+
    "\1\60\43\55\1\61\3\55\1\220\1\221\1\132\1\222"+
    "\1\220\1\67\3\220\1\223\1\220\1\224\1\67\5\220"+
    "\1\67\47\220\1\225\1\226\3\225\1\227\5\225\1\230"+
    "\1\227\5\225\1\227\32\225\1\231\12\225\1\231\1\225"+
    "\1\232\1\226\3\232\1\233\3\232\1\234\2\232\1\233"+
    "\5\232\1\233\32\232\1\231\12\232\1\231\1\232\1\45"+
    "\1\0\10\45\1\0\53\45\1\0\3\45\3\0\1\235"+
    "\1\236\14\0\1\237\55\0\1\240\2\0\1\241\3\0"+
    "\1\240\5\0\1\240\6\241\1\0\13\241\1\0\7\241"+
    "\1\242\3\241\1\0\3\241\4\0\1\241\1\45\1\0"+
    "\6\45\1\243\1\45\1\0\10\45\6\243\1\45\13\243"+
    "\1\45\7\243\1\45\3\243\1\45\3\243\1\45\1\0"+
    "\2\45\1\243\5\0\1\240\2\0\1\244\3\0\1\240"+
    "\5\0\1\240\6\244\1\0\13\244\1\0\7\244\1\0"+
    "\3\244\1\0\3\244\1\0\1\245\2\0\1\244\113\0"+
    "\1\246\136\0\1\245\23\0\1\247\60\0\1\250\64\0"+
    "\1\251\74\0\1\67\6\0\1\67\5\0\1\67\55\0"+
    "\3\70\4\0\1\70\5\0\6\70\1\0\13\70\1\0"+
    "\7\70\1\0\3\70\1\0\4\70\3\0\1\70\6\0"+
    "\3\70\4\0\1\70\5\0\2\70\2\252\2\70\1\0"+
    "\13\70\1\0\7\70\1\0\3\70\1\0\4\70\3\0"+
    "\1\70\6\0\3\70\4\0\1\70\5\0\2\70\1\252"+
    "\1\253\2\70\1\0\13\70\1\0\7\70\1\0\3\70"+
    "\1\0\4\70\3\0\1\70\6\0\3\70\4\0\1\70"+
    "\5\0\2\70\2\254\2\70\1\0\13\70\1\0\7\70"+
    "\1\0\3\70\1\0\4\70\3\0\1\70\5\0\1\74"+
    "\6\0\1\74\5\0\1\74\51\0\1\255\71\0\1\256"+
    "\75\0\3\102\4\0\1\102\5\0\6\102\1\0\13\102"+
    "\1\0\7\102\1\0\3\102\1\0\4\102\3\0\1\102"+
    "\1\104\2\0\1\257\1\104\1\0\3\104\1\0\1\104"+
    "\2\0\5\104\1\0\50\104\1\0\1\256\1\257\1\104"+
    "\1\0\3\104\1\0\1\104\2\0\5\104\1\0\47\104"+
    "\1\260\1\0\7\260\1\261\60\260\1\262\1\0\11\262"+
    "\1\261\56\262\1\104\2\0\1\257\1\104\1\0\3\104"+
    "\1\0\1\104\2\0\5\104\1\0\43\104\1\263\3\104"+
    "\2\0\1\113\1\264\74\0\3\115\4\0\1\115\5\0"+
    "\6\115\1\0\13\115\1\0\7\115\1\0\3\115\1\0"+
    "\4\115\3\0\1\115\1\117\2\0\1\265\1\117\1\0"+
    "\3\117\1\0\1\117\2\0\5\117\1\0\50\117\1\0"+
    "\1\113\1\266\1\117\1\0\3\117\1\0\1\117\2\0"+
    "\5\117\1\0\47\117\1\121\1\0\1\267\1\270\1\121"+
    "\1\267\3\121\1\271\1\121\2\267\5\121\1\267\47\121"+
    "\1\122\1\0\1\272\1\273\1\122\1\272\3\122\1\272"+
    "\1\122\1\271\1\272\5\122\1\272\47\122\1\117\2\0"+
    "\1\265\1\117\1\0\3\117\1\0\1\117\2\0\5\117"+
    "\1\0\43\117\1\274\3\117\67\0\1\275\2\0\1\130"+
    "\3\0\17\130\6\0\1\130\13\0\1\130\7\0\1\130"+
    "\3\0\1\130\3\0\4\130\4\0\1\235\15\0\1\237"+
    "\52\0\1\276\67\0\1\130\3\0\2\130\3\134\4\130"+
    "\1\134\5\130\6\135\1\130\13\135\1\130\7\135\1\130"+
    "\3\135\1\130\3\135\1\134\3\130\1\135\6\0\3\135"+
    "\4\0\1\135\5\0\6\135\1\0\13\135\1\0\7\135"+
    "\1\0\3\135\1\0\4\135\3\0\1\135\3\0\1\235"+
    "\4\0\1\277\10\0\1\237\1\0\6\277\1\0\13\277"+
    "\1\0\7\277\1\0\3\277\1\0\3\277\4\0\1\277"+
    "\6\0\3\137\4\0\1\137\5\0\6\137\1\0\13\137"+
    "\1\0\7\137\1\0\3\137\1\0\4\137\3\0\1\137"+
    "\1\141\2\0\1\300\1\141\1\0\3\141\1\0\1\141"+
    "\2\0\5\141\1\0\47\141\3\0\1\235\4\0\1\301"+
    "\10\0\1\237\1\0\6\301\1\0\13\301\1\0\7\301"+
    "\1\0\3\301\1\0\3\301\4\0\1\301\1\141\1\0"+
    "\1\276\1\300\1\141\1\0\3\141\1\0\1\141\2\0"+
    "\5\141\1\0\47\141\1\302\1\0\7\302\1\303\60\302"+
    "\1\304\1\0\11\304\1\303\56\304\3\0\1\235\15\0"+
    "\1\305\113\0\1\306\63\0\1\307\13\0\1\307\47\0"+
    "\2\310\41\0\20\311\1\312\51\311\6\0\3\154\4\0"+
    "\1\154\5\0\6\154\1\0\13\154\1\0\7\154\1\0"+
    "\3\154\1\0\4\154\3\0\1\154\46\0\1\313\5\0"+
    "\1\313\75\0\1\314\11\0\1\157\2\0\1\315\1\157"+
    "\1\0\3\157\1\0\1\157\2\0\5\157\1\0\47\157"+
    "\1\316\1\0\7\316\1\317\60\316\1\320\1\0\1\320"+
    "\2\321\1\320\3\321\2\320\1\322\4\321\1\320\10\321"+
    "\1\320\32\321\4\320\2\321\1\163\2\311\1\323\1\163"+
    "\1\311\3\163\1\311\1\163\2\311\3\163\1\324\1\163"+
    "\1\311\47\163\1\157\2\0\1\315\1\157\1\0\3\157"+
    "\1\0\1\157\2\0\5\157\1\0\43\157\1\325\3\157"+
    "\1\165\2\0\1\326\1\165\1\0\3\165\1\0\1\165"+
    "\2\0\5\165\1\0\47\165\11\327\1\330\60\327\13\331"+
    "\1\330\56\331\1\171\2\311\1\332\1\171\1\311\3\171"+
    "\1\311\1\171\2\311\3\171\1\333\1\171\1\311\47\171"+
    "\1\165\2\0\1\326\1\165\1\0\3\165\1\0\1\165"+
    "\2\0\5\165\1\0\43\165\1\334\3\165\1\173\2\0"+
    "\1\335\1\173\1\0\3\173\1\0\1\173\2\0\5\173"+
    "\1\0\47\173\1\336\1\0\7\336\1\337\60\336\1\340"+
    "\1\0\1\340\2\341\1\340\3\341\2\340\1\342\4\341"+
    "\1\340\10\341\1\340\32\341\4\340\2\341\1\173\2\0"+
    "\1\335\1\173\1\0\3\173\1\0\1\173\2\0\5\173"+
    "\1\0\43\173\1\343\3\173\2\200\1\0\71\200\1\0"+
    "\16\200\1\344\52\200\1\0\63\200\1\345\3\200\1\204"+
    "\2\0\1\346\1\204\1\0\3\204\1\0\1\204\2\0"+
    "\5\204\1\0\47\204\1\347\1\0\7\347\1\350\60\347"+
    "\1\351\1\0\1\351\2\352\1\351\3\352\2\351\1\353"+
    "\4\352\1\351\10\352\1\351\32\352\4\351\2\352\1\204"+
    "\2\0\1\346\1\204\1\0\3\204\1\0\1\204\2\0"+
    "\5\204\1\0\43\204\1\354\3\204\2\211\1\0\71\211"+
    "\1\0\16\211\1\355\52\211\1\0\63\211\1\356\3\211"+
    "\1\220\2\0\1\357\1\220\1\0\3\220\1\0\1\220"+
    "\2\0\5\220\1\0\50\220\1\0\1\276\1\357\1\220"+
    "\1\0\3\220\1\0\1\220\2\0\5\220\1\0\47\220"+
    "\1\360\1\0\7\360\1\361\60\360\1\362\1\0\11\362"+
    "\1\361\56\362\1\225\1\0\11\225\1\0\41\225\1\0"+
    "\12\225\1\0\1\225\3\0\1\363\15\0\1\246\50\0"+
    "\1\225\1\0\3\225\1\227\5\225\1\0\1\227\5\225"+
    "\1\227\32\225\1\0\12\225\1\0\1\225\5\0\1\231"+
    "\6\0\1\231\5\0\1\231\47\0\1\232\1\0\7\232"+
    "\1\0\43\232\1\0\12\232\1\0\2\232\1\0\3\232"+
    "\1\233\3\232\1\0\2\232\1\233\5\232\1\233\32\232"+
    "\1\0\12\232\1\0\1\232\7\0\1\364\21\0\1\365"+
    "\45\0\1\240\2\0\1\45\3\0\1\240\5\0\1\240"+
    "\6\45\1\0\13\45\1\0\7\45\1\0\3\45\1\0"+
    "\3\45\4\0\1\45\1\366\1\0\3\366\1\367\3\241"+
    "\1\366\1\0\1\366\1\367\1\241\4\366\1\367\6\241"+
    "\1\366\13\241\1\366\7\241\1\366\3\241\1\370\4\241"+
    "\1\0\2\366\1\241\15\0\1\371\6\0\1\372\45\0"+
    "\1\45\1\0\4\45\3\243\1\45\1\0\2\45\1\243"+
    "\5\45\6\243\1\45\13\243\1\45\7\243\1\45\3\243"+
    "\1\373\4\243\1\0\2\45\1\243\1\366\1\0\3\366"+
    "\1\367\3\244\1\366\1\0\1\366\1\367\1\244\4\366"+
    "\1\367\6\244\1\366\13\244\1\366\7\244\1\366\3\244"+
    "\1\0\4\244\1\0\2\366\1\244\31\0\1\365\42\0"+
    "\1\374\71\0\1\375\75\0\3\70\4\0\1\70\5\0"+
    "\4\70\2\376\1\0\13\70\1\0\7\70\1\0\3\70"+
    "\1\0\4\70\3\0\1\70\6\0\3\70\4\0\1\70"+
    "\5\0\4\70\1\376\1\377\1\0\13\70\1\0\7\70"+
    "\1\0\3\70\1\0\4\70\3\0\1\70\6\0\3\70"+
    "\4\0\1\70\5\0\6\70\1\0\13\70\1\0\1\70"+
    "\1\u0100\5\70\1\0\3\70\1\0\4\70\3\0\1\70"+
    "\1\267\1\0\7\267\1\271\60\267\1\272\1\0\11\272"+
    "\1\271\56\272\6\0\3\277\4\0\1\277\5\0\6\277"+
    "\1\0\13\277\1\0\7\277\1\0\3\277\1\0\4\277"+
    "\3\0\1\277\6\0\3\301\4\0\1\301\5\0\6\301"+
    "\1\0\13\301\1\0\7\301\1\0\3\301\1\0\4\301"+
    "\3\0\1\301\32\0\1\u0101\30\0\1\u0101\43\0\1\u0102"+
    "\13\0\1\u0102\57\0\1\u0103\10\0\1\u0103\62\0\1\u0104"+
    "\14\0\1\u0104\75\0\1\u0105\7\0\1\320\1\0\11\320"+
    "\1\317\57\320\1\0\11\320\1\u0106\56\320\13\0\1\u0107"+
    "\56\0\1\340\1\0\11\340\1\337\57\340\1\0\11\340"+
    "\1\u0108\56\340\13\0\1\u0109\56\0\2\200\1\0\26\200"+
    "\1\u010a\40\200\1\351\1\0\11\351\1\350\57\351\1\0"+
    "\11\351\1\u010b\56\351\13\0\1\u010c\56\0\2\211\1\0"+
    "\26\211\1\u010d\40\211\7\0\1\u010e\114\0\1\u010f\37\0"+
    "\1\366\1\0\10\366\1\0\46\366\1\0\4\366\1\0"+
    "\4\366\1\0\3\366\1\367\4\366\1\0\1\366\1\367"+
    "\5\366\1\367\36\366\1\u0110\4\366\1\0\3\366\15\0"+
    "\1\371\43\0\1\u0111\25\0\1\u0112\14\0\3\u0112\2\0"+
    "\1\u0112\10\0\1\u0112\1\0\2\u0112\3\0\1\u0112\2\0"+
    "\2\u0112\14\0\1\70\1\u0113\1\70\4\0\1\70\5\0"+
    "\6\70\1\0\13\70\1\0\7\70\1\0\3\70\1\0"+
    "\4\70\3\0\1\70\6\0\3\70\4\0\1\70\5\0"+
    "\6\70\1\0\11\70\1\u0114\1\70\1\0\7\70\1\0"+
    "\3\70\1\0\4\70\3\0\1\70\35\0\1\u0115\13\0"+
    "\1\u0115\47\0\2\u0116\66\0\2\u0117\100\0\1\u0118\13\0"+
    "\1\u0118\47\0\2\u0119\44\0\2\u011a\1\0\3\u011a\2\0"+
    "\1\322\4\u011a\1\0\10\u011a\1\0\32\u011a\4\0\2\u011a"+
    "\3\0\2\u011b\1\0\3\u011b\2\0\1\342\4\u011b\1\0"+
    "\10\u011b\1\0\32\u011b\4\0\2\u011b\2\200\1\0\27\200"+
    "\1\u011c\37\200\3\0\2\u011d\1\0\3\u011d\2\0\1\353"+
    "\4\u011d\1\0\10\u011d\1\0\32\u011d\4\0\2\u011d\2\211"+
    "\1\0\27\211\1\u011e\37\211\33\0\1\u011f\117\0\1\u0110"+
    "\25\0\1\u0112\14\0\3\u0112\2\0\1\u0112\10\0\1\u0112"+
    "\1\0\2\u0112\3\0\1\u0112\1\0\1\u0111\2\u0112\14\0"+
    "\3\70\4\0\1\70\5\0\6\70\1\0\7\70\1\u0120"+
    "\3\70\1\0\7\70\1\0\3\70\1\0\4\70\3\0"+
    "\1\70\6\0\3\70\4\0\1\70\5\0\6\70\1\0"+
    "\6\70\1\u0121\4\70\1\0\7\70\1\0\3\70\1\0"+
    "\4\70\3\0\1\70\46\0\1\u0122\5\0\1\u0122\57\0"+
    "\1\u0123\66\0\1\u0124\10\0\1\u0124\60\0\1\u0125\10\0"+
    "\1\u0125\63\0\1\u0126\27\0\2\200\1\0\30\200\1\u0127"+
    "\36\200\2\211\1\0\30\211\1\u0128\36\211\34\0\1\u0129"+
    "\43\0\3\70\4\0\1\70\5\0\6\70\1\0\13\70"+
    "\1\0\3\70\1\u012a\3\70\1\0\3\70\1\0\4\70"+
    "\3\0\1\70\6\0\3\70\4\0\1\70\5\0\6\70"+
    "\1\0\3\70\1\u012b\7\70\1\0\3\70\1\u012b\3\70"+
    "\1\0\3\70\1\0\4\70\3\0\1\70\47\0\1\u012c"+
    "\63\0\1\u012d\14\0\1\u012d\57\0\1\u012e\52\0\2\u012f"+
    "\75\0\1\u0130\30\0\1\u0130\6\0\2\200\1\0\31\200"+
    "\1\u0131\35\200\2\211\1\0\31\211\1\u0132\35\211\35\0"+
    "\1\u0133\42\0\3\70\4\0\1\70\5\0\6\70\1\0"+
    "\13\70\1\0\6\70\1\u0134\1\0\3\70\1\0\4\70"+
    "\3\0\1\70\37\0\1\u0135\10\0\1\u0135\56\0\1\u0136"+
    "\13\0\1\u0136\55\0\1\u0137\13\0\1\u0137\20\0\2\200"+
    "\1\0\32\200\1\u0138\34\200\2\211\1\0\32\211\1\u0139"+
    "\34\211\34\0\1\u013a\43\0\3\70\4\0\1\70\5\0"+
    "\5\70\1\u013b\1\0\13\70\1\0\7\70\1\0\3\70"+
    "\1\0\4\70\3\0\1\70\2\200\1\0\31\200\1\u013c"+
    "\35\200\2\211\1\0\31\211\1\u013d\35\211\31\0\1\u013e"+
    "\46\0\3\70\4\0\1\70\5\0\6\70\1\0\5\70"+
    "\1\u013f\5\70\1\0\7\70\1\0\3\70\1\0\4\70"+
    "\3\0\1\70\2\200\1\0\26\200\1\u0140\40\200\2\211"+
    "\1\0\26\211\1\u0141\40\211\6\0\3\70\4\0\1\70"+
    "\5\0\6\70\1\0\7\70\1\u0142\3\70\1\0\7\70"+
    "\1\0\3\70\1\0\4\70\3\0\1\70\6\0\3\70"+
    "\4\0\1\70\5\0\6\70\1\0\13\70\1\0\7\70"+
    "\1\0\3\70\1\0\4\70\3\0\1\u0143\6\0\3\70"+
    "\4\0\1\70\5\0\6\70\1\0\5\70\1\u0144\5\70"+
    "\1\0\7\70\1\0\3\70\1\0\4\70\3\0\1\70"+
    "\6\0\3\70\4\0\1\70\5\0\6\70\1\0\5\70"+
    "\1\u0145\5\70\1\0\7\70\1\0\3\70\1\0\4\70"+
    "\3\0\1\70\6\0\3\70\4\0\1\70\5\0\6\70"+
    "\1\0\13\70\1\0\3\70\1\u0146\3\70\1\0\3\70"+
    "\1\0\4\70\3\0\1\70";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack(yy_packed);


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  // final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",		//$NON-NLS-1$
    "Internal error: unknown state",		//$NON-NLS-1$
    "Error: could not match input",		//$NON-NLS-1$
    "Error: pushback value was too large"	//$NON-NLS-1$
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  0,  0,  0,  1,  0,  0,  1,  1,  1,  0,  1,  1,  1,  1, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  9,  1,  1,  9, 
     1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1, 
     1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  9,  1,  1, 
     1,  1,  1,  9,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  9, 
     1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  9,  9,  9,  1,  0, 
     1,  0,  1,  1,  9,  0,  0,  0,  9,  1,  1,  1,  9,  9,  0,  0, 
     9,  0,  1,  0,  0,  0,  0,  0,  9,  0,  0,  1,  9,  9,  1,  0, 
     1,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  9,  0, 
     0,  1,  0,  1,  1,  0,  0,  9,  0,  0,  1,  1,  0,  0,  9,  0, 
     0,  1,  1,  1,  1,  0,  0,  9,  0,  0,  1,  1,  1,  1,  0,  0, 
     9,  0,  9,  0,  0,  1,  1,  9,  0,  0,  1,  9,  9,  1,  1,  1, 
     0,  0,  0,  0,  0,  1,  0,  1,  0,  1,  1,  0,  1,  9,  0,  1, 
     9,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  1,  0,  1,  0,  1, 
     1,  0,  0,  0,  0,  0,  1,  1,  0,  1,  1,  0,  0,  0,  9,  9, 
     1,  1,  0,  1,  9,  9,  9,  1,  1,  0,  1,  1,  1,  9,  1,  1, 
     1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[16384];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  // private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  // private boolean yy_atBOL;

  /** yy_atEOF == true <=> the scanner has returned a value for EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	private int fTokenCount = 0;
 
	// required holders for white-space compacting
	private boolean fShouldLoadBuffered = false;
	private String fBufferedContext = null;
	private int fBufferedStart = 1;
	private int fBufferedLength = 0;
	private ITextRegion fBufferedEmbeddedContainer = null;
	private ITextRegion fProxyUnknownRegion = null;
	private String f_context = null;

	// state stack for handling embedded regions
	private IntStack fStateStack = new IntStack();
	// a "hint" as to what an embedded region should be evaluated
	private String fEmbeddedHint = UNDEFINED;
	// a "hint" as to what state to enter once an embedded region has
	//   been completed
	private int fEmbeddedPostState = YYINITIAL;
	
	// the container used to create embedded regions
	private ContextRegionContainer fEmbeddedContainer = null;
	private static final String PROXY_CONTEXT = "PROXY_CONTEXT";
	private static final String PROXY_UNKNOWN_CONTEXT = "PROXY_UNKNOWN_CONTEXT";

	private String context = null;
	private int start = 0;
	private int textLength = 0;
	private int length = 0;

	// offset for tracking position specific block tags
	private int fOffset = 0;
	
	// the name of the current tag being opened
	private String fCurrentTagName = null;

	// the name of the current tag inside of an embedded region
	private String internalTagName = null;
	private String internalContext = null;

	// the list of tag name BlockMarkers
	private List fBlockMarkers = new ArrayList(0);
	private List fNestablePrefixes = new ArrayList(1);
	
	// where the last internal container block was found
	private int fLastInternalBlockStart = -1;

	// required to not seek text blocks on an end tag
	private boolean fIsBlockingEnabled = false;
	private boolean fIsCaseSensitiveBlocking = true;

	private static final boolean fForbidANGULAR = false;
	
	private int fELlevel = 0;

	private AngularParserRegionFactory fRegionFactory = new AngularParserRegionFactory();

	// Is the embedded tag a ANGULAR tag
	private boolean fEmbeddedTag = false;
	// Is the non-embedded tag a ANGULAR tag
	private boolean fContainerTag = false;
	// Is the tokenizer in a non-embedded tag (between < and >)
	private boolean fInTagContainer = false;
	// Is the tokenizer in an embedded tag (between < and >)
	private boolean fInTagEmbedded = false;

	/**
	 * user method 
	 */
	public final void addBlockMarker(BlockMarker marker) {
		if(containsTagName(marker.getTagName()))
			return;
		fBlockMarkers.add(marker);
	}
	/**
	 * user method
	 */
	public final void addNestablePrefix(TagMarker marker) {
		fNestablePrefixes.add(marker);
	}
	/* user method */
	public List getNestablePrefixes() {
		return fNestablePrefixes;
	}
	/**
	 * user method
	 */
	private boolean isNestable(String tagName) {
		//Iterator blocks = fNestablePrefixes.iterator();
		//while(blocks.hasNext()) {
		//	TagMarker marker = (TagMarker)blocks.next();
		//	String markerName = marker.getTagName();
		//	if(tagName.length() > markerName.length() + 1 && tagName.startsWith(markerName) && tagName.charAt(markerName.length()) == ':') {
		//		return marker.isGlobal() || getOffset() >= marker.getMarker().getStart();
		//	}
		//}
		//return false;
		return true;
	}
	/**
	 * user method 
	 */
	public final void removeNestablePrefix(String name) {
		if (fNestablePrefixes != null) {
			Iterator nestables = fNestablePrefixes.iterator();
			while (nestables.hasNext()) {
				if (((TagMarker) nestables.next()).getTagName().equalsIgnoreCase(name))
					nestables.remove();
			}
		}
	}
	/**
	 * user method 
	 */
	public final void removeBlockMarker(BlockMarker marker) {
		fBlockMarkers.remove(marker);
	}
	/**
	 * user method 
	 */
	public final void removeBlockMarker(String tagname) {
		if (fBlockMarkers != null) {
			Iterator blocks = fBlockMarkers.iterator();
			while (blocks.hasNext()) {
				if (((BlockMarker) blocks.next()).getTagName().equals(tagname))
					blocks.remove();
			}
		}
	}
	/* user method */
	private final void assembleEmbeddedTagSequence(String startType, String endTagName) {
		assembleEmbeddedContainer(startType, null, endTagName);
	}
	/* user method */
	private final void assembleEmbeddedContainer(String startType, String[] endTypes) {
		assembleEmbeddedContainer(startType, endTypes, null);
	}
	/* user method */
	private final void assembleEmbeddedContainer(String startType, String endType) {
		assembleEmbeddedContainer(startType, new String[]{endType}, null);
	}
	/**
	 *  user method 
	 * 
	 * Assembles an embedded container beginning with the given startType as
	 * the first ContextRegion within it and of the type fEmbeddedHint.  The
	 * endTypes[] array contains the context types that will cause a successful
	 * exit.  Use of the endTagName parameter alters this behavior to force an
	 * exit on an XML_TAG_CLOSE after seeing an XML_TAG_NAME whose significant
	 * text matches the endTagName String.  All contents in between are
	 * insignificant, and yes, this means comments are allowed inside.
	 **/
	private final void assembleEmbeddedContainer(String startType, String[] endTypes, String endTagName) {
		// the context of the region being added to the embedded container
		internalContext = startType;
		// keep track of where this container began; to provide relative indeces for the regions
		int containerStart = yychar;
		boolean notFinished = true;
		// keep track of where we seem to be so that the endTagName can be checked
		boolean isInEndTag = false;
		boolean isInFirstTag = true;
		// create the embedded container and setup its "type"
		if (fEmbeddedContainer == null) {
			fEmbeddedContainer = new ContextRegionContainer();
			fEmbeddedContainer.setType(fEmbeddedHint);
			fEmbeddedContainer.setStart(containerStart);
			// TODO: parent region needs to be set .... but not sure where to get it from 
			//		fEmbeddedContainer.setParent(parentRegion);
		}
		int initialLength = fEmbeddedContainer.getRegions().size();
		containerStart = fEmbeddedContainer.getStart();
		while (notFinished) {
			// add the region to the container
			if (internalContext != null && internalContext != PROXY_CONTEXT) {
				ITextRegion newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
				fEmbeddedContainer.getRegions().add(newToken);
				fEmbeddedContainer.setLength(fEmbeddedContainer.getLength() + yylength());
				fEmbeddedContainer.setTextLength(fEmbeddedContainer.getTextLength() + yylength());
				// DW, 4/16/2003 token regions no longer have parents
				//newToken.setParent(fEmbeddedContainer);
			}
			try {
				// longscan determines whether to attempt a blockTagScan within the embedded container
				boolean longscan = false;
				// save the tokenizer state in case of a block tag scan
				int previousState = yystate();
				String previousCurrentTagName = fCurrentTagName;
				int previousPostState = fEmbeddedPostState;
				String previousEmbeddedHint = fEmbeddedHint;
				// determine if a block tag scan is necessary
				if (internalContext == XML_TAG_NAME) {
					internalTagName = yytext();
					if (endTagName != null && endTagName.length() == 0){
						endTagName = internalTagName;
					}
					if(!isNestable(internalTagName)) {
						internalTagName = null;
						// snagged a tag name we shouldn't have
						fEmbeddedPostState = ST_ABORT_EMBEDDED;
						notFinished = false;
					}
				}
				else if (internalContext == XML_TAG_OPEN || internalContext == XML_END_TAG_OPEN) {
					internalTagName = null;
				}
				// do upkeep for endTagName usage; must be here since the next token could be the close
				if (internalContext == XML_END_TAG_OPEN) {
					isInEndTag = true;
				} else if (internalContext == XML_TAG_CLOSE) {
					isInFirstTag = isInEndTag = false;
				} else {
				 	ITextRegionList embeddedRegions = fEmbeddedContainer.getRegions();
					if (embeddedRegions.size() > 2 && (embeddedRegions.get(embeddedRegions.size()-1)).getType() == XML_TAG_CLOSE && (embeddedRegions.get(embeddedRegions.size() - 3)).getType() == XML_TAG_OPEN && internalTagName != null) {
						if (containsTagName(internalTagName)) {
							longscan = true;
							yybegin(ST_BLOCK_TAG_SCAN);
						}
					}
				}
				if (longscan)
					fCurrentTagName = internalTagName;
				// read the next region and context
				internalContext = primGetNextToken();
				if (longscan) {
					// Returning from a block tag scan requires restoring some state variables
					// as well as handling the block region and setting up for normal scanning
					// inside the embedded container
					ITextRegion newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
					fEmbeddedContainer.getRegions().add(newToken);
					fEmbeddedContainer.setLength(fEmbeddedContainer.getLength() + yylength());
					fEmbeddedContainer.setTextLength(fEmbeddedContainer.getTextLength() + yylength());
					// DW, 4/16/2003 token regions no longer have parents
					// newToken.setParent(fEmbeddedContainer);
					longscan = false;
					fEmbeddedPostState = previousPostState;
					fEmbeddedHint = previousEmbeddedHint;
					fCurrentTagName = previousCurrentTagName;
					yybegin(previousState);
					internalContext = primGetNextToken();
				}
			} catch (IOException e) {
				// primGetNextToken() calls may throw an IOException
				// catch and do nothing since the isEOF check below
				// will properly exit if the input was too short
			} catch (Exception f) {
				// some other exception happened; never should
				Logger.logException(f);
			}
			boolean isEndingType = yystate() == ST_ABORT_EMBEDDED;
			ITextRegionList embeddedList = fEmbeddedContainer.getRegions();
			if(!isEndingType) {
				// check for ending context
				if (endTagName == null) {
					for (int i = 0; i < endTypes.length; i++) {
						isEndingType = isEndingType || (internalContext == endTypes[i]) || (embeddedList.size() - initialLength) >= 2 && (embeddedList.get(embeddedList.size()-1)).getType() == endTypes[i];
					}
				}
				else {
					isEndingType = ((isInEndTag && internalContext == XML_TAG_CLOSE) || (isInFirstTag && internalContext == XML_EMPTY_TAG_CLOSE)) && internalTagName != null && internalTagName.equals(endTagName);
				}
			}
			notFinished = notFinished && ((!isEndingType) && !isEOF() && (endTagName != null || internalContext != UNDEFINED) && !(internalContext == PROXY_CONTEXT && (embeddedList.get(embeddedList.size()-1)).getType() == UNDEFINED));
		}
		// finish adding the last context
		if (internalContext != null && internalContext != PROXY_CONTEXT) {
			ITextRegion newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
			fEmbeddedContainer.getRegions().add(newToken);
			// DW, 4/16/2003 token regions no longer have parents
			//newToken.setParent(fEmbeddedContainer);
			fEmbeddedContainer.setLength(yychar - containerStart + yylength());
			fEmbeddedContainer.setTextLength(yychar - containerStart + yylength());
		}
		yybegin(fEmbeddedPostState);
	}
	/* user method */
	public final boolean isCaseSensitiveBlocking() {
		return fIsCaseSensitiveBlocking;
	}
	/* user method */
	public final void setCaseSensitiveBlocking(boolean newValue) {
		fIsCaseSensitiveBlocking = newValue;
	}
	/* user method */
	public boolean getBlockMarkerCaseSensitivity() {
		return getBlockMarkerCaseSensitivity(fCurrentTagName);
	}
	public boolean getBlockMarkerCaseSensitivity(String name) {
		Iterator iterator = fBlockMarkers.iterator();
		while(iterator.hasNext()) {
			BlockMarker marker = (BlockMarker)iterator.next();
			boolean casesensitive = marker.isCaseSensitive();
			if(casesensitive && marker.getTagName().equals(name))
				return casesensitive;
			else if(!casesensitive && marker.getTagName().equalsIgnoreCase(name))
				return casesensitive;
		}
		return true;
	}
	/* user method */
	public String getBlockMarkerContext() {
		return getBlockMarkerContext(fCurrentTagName);
	}
	/* user method */
	public String getBlockMarkerContext(String name) {
		Iterator iterator = fBlockMarkers.iterator();
		while(iterator.hasNext()) {
			BlockMarker marker = (BlockMarker)iterator.next();
			if(marker.getTagName().equals(name))
				return marker.getContext();
		}
		return BLOCK_TEXT;
	}
	/* user method */
	public List getBlockMarkers() {
		return fBlockMarkers;
	}
	/* user method */
	public final int getOffset() {
		return fOffset + yychar;
	}
	private final boolean isBlockMarker() {
		return isBlockMarker(fCurrentTagName);
	}
	private final boolean isBlockMarker(String tagName) {
		if (!fIsBlockingEnabled)
			return false;
		return containsTagName(tagName);
	}
	/**
	 * user method
	 */
	public final void beginBlockTagScan(String newTagName) {
		beginBlockMarkerScan(newTagName, BLOCK_TEXT);
	}
	/**
	 * user method
	 *
	 * Special tokenizer setup.  Allows tokenization to be initiated at the
	 * start of a text block within a "newTagName" tag.
	 *
	 * Example: 
	 *	Tokenizer toker = new Tokenizer();
	 *	toker.setCaseSensitiveBlocking(false);
	 *	toker.reset(new java.io.StringReader("afiuhqwkejhtasihgalkwhtq</scripter></scr></script>asgdasga"));
	 *	toker.beginBlockMarkerScan("script", BLOCK_TEXT);
	 *	toker.getRegions(); 
	 *
	 * Returns:
	 *	BLOCK_TEXT: 0-40
	 *	XML_END_TAG_OPEN: 41-42
	 *	XML_TAG_NAME: 43-48
	 *	XML_TAG_CLOSE: 49-49
	 *	XML_CONTENT: 50-57
	 *
	 */
	public final void beginBlockMarkerScan(String newTagName, String blockcontext) {
		yybegin(ST_BLOCK_TAG_SCAN);
		fCurrentTagName = newTagName;
	}

/**
 * Method doScan.
 * 
 * Returns a context region for all of the text from the current position upto the end of input or
 * to right *before* the first occurence of searchString
 * 
 * @param searchString - target string to search for ex.: "-->", "</tagname"
 * @param requireTailSeparator - whether the target must be immediately followed by whitespace or '>'
 * @param allowANGULAR - check for and allow for ANGULAR markup {{>
 * @param context - the context of the scanned region if non-zero length
 * @param exitState - the state to go to if the region was of non-zero length
 * @param abortState - the state to go to if the searchString was found immediately
 * @return String - the context found: the desired context on a non-zero length match, the abortContext on immediate success
 * @throws IOException
 */
private final String doScan(String searchString, boolean requireTailSeparator, boolean allowANGULAR, boolean allowCDATA, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	boolean stillSearching = true;
	boolean wasBlockingEnabled = fIsBlockingEnabled;
	try {
		// Disable further block (probably)
		fIsBlockingEnabled = false;
		int searchStringLength = searchString.length();
		int n = 0;
		char lastCheckChar;
		int i;
		boolean same = false;
		// Check for ANGULAR starts ("{{") if the tag is global like SCRIPT or STYLE
		boolean checkANGULARs = allowANGULAR && !fForbidANGULAR;
		boolean checkedForANGULARsOnce = !checkANGULARs;
		boolean checkedANGULARsAtStartOnce = false;
		
		while (stillSearching) {
			n = 0;
			// Ensure that enough data from the input exists to compare against the search String.
			n = yy_advance();
			while(n != YYEOF && yy_currentPos < searchStringLength)
				n = yy_advance();
	//		c = (char) n;
			// If the input was too short or we've exhausted the input, stop immediately.
			if (n == YYEOF && checkedForANGULARsOnce) {
				stillSearching = false;
			}
			else {
				/**
				 * Look for starting ANGULARs "{{"
				 */
				checkedForANGULARsOnce = true;
				// 1) yy_currentPos - searchStringLength : There's at least searchStringLength of input available; once that's read, check for ANGULARs
				// ---
				// Look for a ANGULAR beginning at current-searchStringLength; if so, backup and switch scanner states to handle it.
				// Ensure that we've not encountered a complete block ({{>) that was *shorter* than the closeTagString and
				// thus found twice at current-targetLength [since the first scan would have come out this far anyway].
				if(checkANGULARs && yy_currentPos > searchStringLength && yy_currentPos - searchStringLength != fLastInternalBlockStart && yy_currentPos - searchStringLength > yy_startRead &&
					yy_buffer[yy_currentPos - searchStringLength] == '<' && yy_buffer[yy_currentPos - searchStringLength + 1] == '#') {
					fLastInternalBlockStart = yy_markedPos = yy_currentPos - searchStringLength;
					yy_currentPos = yy_markedPos + 1;
					int resumeState = yystate();
					yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
					if(yy_markedPos == yy_startRead) {
						String jspContext = primGetNextToken();
						yybegin(resumeState);
						return jspContext;
					}
					return searchContext;
				}
				// 2) yy_currentPos - jspstarter.length : There's not searchStringLength of input available; check for a ANGULAR 2 spots back in what we could read
				// ---
				// Look for a ANGULAR beginning at the current position; this case wouldn't be handled by the preceding section
				// since it relies upon *having* closeTagStringLength amount of input to work as designed.  Must be sure we don't
				// spill over the end of the buffer while checking.
				else if(checkANGULARs && yy_startRead != fLastInternalBlockStart && yy_currentPos > 0 && yy_currentPos < yy_buffer.length - 1 &&
						yy_buffer[yy_currentPos - 1] == '{' && yy_buffer[yy_currentPos] == '{') {
					fLastInternalBlockStart = yy_markedPos = yy_currentPos - 1;
					yy_currentPos = yy_markedPos + 1;
					int resumeState = yystate();
					yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
					if(yy_markedPos == yy_startRead) {
						String jspContext = primGetNextToken();
						yybegin(resumeState);
						return jspContext;
					}
					return searchContext;
				}
				// 3) yy_currentPos..(yy_currentPos+jspStartlength-1) : Check at the start of the block one time
				// ---
				// Look for a ANGULAR beginning immediately in the block area; this case wouldn't be handled by the preceding section
				// since it relies upon yy_currentPos equaling exactly the previous end +1 to work as designed.
				else if(checkANGULARs && !checkedANGULARsAtStartOnce && yy_startRead != fLastInternalBlockStart && yy_startRead > 0 &&
						yy_startRead < yy_buffer.length - 1 && yy_buffer[yy_startRead] == '{' && yy_buffer[yy_startRead + 1] == '{') {
					checkedANGULARsAtStartOnce = true;
					fLastInternalBlockStart = yy_markedPos = yy_startRead;
					yy_currentPos = yy_markedPos + 1;
					int resumeState = yystate();
					yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
					if(yy_markedPos == yy_startRead) {
						String jspContext = primGetNextToken();
						yybegin(resumeState);
						return jspContext;
					}
					return searchContext;
				}
	
	
				/**
				 * Look for starting CDATA "<![CDATA["
				 */
				// 1) yy_currentPos - searchStringLength: There's at least searchStringLength of input available; once that's read, check for CDATA
				// ---
				// Look for a CDATA beginning at current-searchStringLength; if so, backup and switch scanner states to handle it.
				// Ensure that we've not encountered a complete block (<[!CDATA[]]>) that was *shorter* than the closeTagString and
				// thus found twice at current-targetLength [since the first scan would have come out this far anyway].
	/*			if(checkCDATA && yy_currentPos > searchStringLength && yy_currentPos + searchStringLength < yy_buffer.length && yy_currentPos - searchStringLength != fLastInternalBlockStart && 
					charsMatch(cdataStarter, yy_buffer, 0, yy_currentPos - searchStringLength)) {
					fLastInternalBlockStart = yy_markedPos = yy_currentPos - searchStringLength;
					yy_currentPos = yy_markedPos + 1;
					int resumeState = yystate();
					// go to a state where CDATA can be found
					if (fEmbeddedContainer == null) {
						fEmbeddedContainer = new ContextRegionContainer();
						fEmbeddedContainer.setType(searchContext);
						fEmbeddedContainer.setStart(yychar);
					}
					ITextRegion newToken = fRegionFactory.createToken(searchContext, yychar, yylength(), yylength());
					fEmbeddedContainer.getRegions().add(newToken);
					fEmbeddedContainer.setLength(fEmbeddedContainer.getLength() + yylength());
					fEmbeddedContainer.setTextLength(fEmbeddedContainer.getTextLength() + yylength());
					yybegin(YYINITIAL);
					String context = primGetNextToken();
					if(context.equals(XMLRegionContexts.XML_CDATA_OPEN)) {
						assembleEmbeddedContainer(XMLRegionContexts.XML_CDATA_OPEN, XMLRegionContexts.XML_CDATA_CLOSE);
					}
					yybegin(resumeState);
					return searchContext;
				}
	*//*
				// 2) yy_currentPos - cdataStarter.length: There's not searchStringLength of input available; check for a CDATA right here spots back in what we could read
				// ---
				// Look for a ANGULAR beginning at the current position; this case wouldn't be handled by the preceding section
				// since it relies upon *having* closeTagStringLength amount of input to work as designed.  Must be sure we don't
				// spill over the end of the buffer while checking.
				else if(checkCDATA && yy_startRead != fLastInternalBlockStart && yy_currentPos > 0 && yy_currentPos < yy_buffer.length - 1 &&
						yy_buffer[yy_currentPos - 1] == '{' && yy_buffer[yy_currentPos] == '{') {
					fLastInternalBlockStart = yy_markedPos = yy_currentPos - 1;
					yy_currentPos = yy_markedPos + 1;
					int resumeState = yystate();
					yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
					if(yy_markedPos == yy_startRead) {
						String jspContext = primGetNextToken();
						yybegin(resumeState);
						return jspContext;
					}
					return searchContext;
				}
				// 3) yy_currentPos : Check at the start of the block one time
				// ---
				// Look for a ANGULAR beginning immediately in the block area; this case wouldn't be handled by the preceding section
				// since it relies upon yy_currentPos equaling exactly the previous end +1 to work as designed.
				else if(checkCDATA && !checkedForCDATAOnce && yy_startRead != fLastInternalBlockStart && yy_startRead > 0 &&
						yy_startRead < yy_buffer.length - 1 && yy_buffer[yy_startRead] == '{' && yy_buffer[yy_startRead + 1] == '{') {
					checkedForCDATAOnce = true;
					fLastInternalBlockStart = yy_markedPos = yy_startRead;
					yy_currentPos = yy_markedPos + 1;
					int resumeState = yystate();
					yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
					if(yy_markedPos == yy_startRead) {
						String jspContext = primGetNextToken();
						yybegin(resumeState);
						return jspContext;
					}
					return searchContext;
				}
	*/
				// Check the characters in the target versus the last targetLength characters read from the buffer
				// and see if it matches
				if (n == YYEOF) {
					stillSearching = false;
				}
				else {
					same = true;
					// safety check for array accesses
					if(yy_currentPos >= searchStringLength && yy_currentPos <= yy_buffer.length) {
						for(i = 0; i < searchStringLength && same; i++) {
							if(fIsCaseSensitiveBlocking)
								same = yy_buffer[i + yy_currentPos - searchStringLength] == searchString.charAt(i);
							else
								same = Character.toLowerCase(yy_buffer[i + yy_currentPos - searchStringLength]) == Character.toLowerCase(searchString.charAt(i));
						}
					}
					// safety check failed; no match is possible right now
					else {
						same = false;
					}
				}
				if (same && requireTailSeparator && yy_currentPos < yy_buffer.length) {
					// Additional check for close tags to ensure that targetString="</script" doesn't match
					// "</scriptS"
					lastCheckChar = yy_buffer[yy_currentPos];
					// Succeed on "</script>" and "</script "
					if(lastCheckChar == '>' || Character.isWhitespace(lastCheckChar))
						stillSearching = false;
				}
				else {
					stillSearching = !same || (yy_currentPos < yy_startRead + searchStringLength);
				}
			}
		}
		if (n != YYEOF || same) {
			// We've stopped short of the end or definitely found a match
			yy_markedPos = yy_currentPos - searchStringLength;
			yy_currentPos = yy_markedPos + 1;
			// If the searchString occurs at the very beginning of what would have
			// been a Block, resume scanning normally immediately
			if (yy_markedPos == yy_startRead) {
				yybegin(immediateFallbackState);
				return primGetNextToken();
			}
		}
		else {
			// We ran through the rest of the input
			yy_markedPos = yy_currentPos;
			yy_currentPos++;
		}
		yybegin(exitState);
		// If the ending occurs at the very beginning of what would have
		// been a Block, resume scanning normally immediately
		if(yy_markedPos == yy_startRead)
			return primGetNextToken();
		return searchContext;
	}
	finally {
		fIsBlockingEnabled = wasBlockingEnabled;
	}
}
/**
 * user method 
 * does a lookahead for the current tag name
 */
private final String doBlockTagScan() throws IOException {
	fIsCaseSensitiveBlocking = getBlockMarkerCaseSensitivity();
	return doScan("</" + fCurrentTagName, true, true, true, getBlockMarkerContext(fCurrentTagName), YYINITIAL, YYINITIAL);
}
	/**
	 * user method
	 *
	 * Converts the raw context String returned by the primGetNextToken()
	 * method into a full ITextRegion by pulling in values for the
	 * current offset within the scanning text.
	 *
	 * Returns null when EOF is encountered and attaches intermittently
	 * discovered whitespace onto the end of useful regions.
	 *
	 * Note that this algorithm caches the token following the one being returned
	 * so that whitespace can be collapsed.
	 */
	public final ITextRegion getNextToken() throws IOException {
		fEmbeddedContainer = null;
		// load the starting non-whitespace token (assume that it is so)
		if (fShouldLoadBuffered) {
			if (fBufferedEmbeddedContainer != null) {
				ITextRegion container = fBufferedEmbeddedContainer;
				fBufferedEmbeddedContainer = null;
				fShouldLoadBuffered = false;
				return container;
			}
			context = fBufferedContext;
			start = fBufferedStart;
			textLength = length = fBufferedLength;
			fShouldLoadBuffered = false;
		} else {
			context = primGetNextToken();
			if (context == PROXY_CONTEXT) {
				return fEmbeddedContainer;
			} else if (context == XML_TAG_NAME) {
				if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
					fCurrentTagName = yytext();
				else
					fCurrentTagName = null;
			} else if (context == XML_TAG_OPEN) {
				fIsBlockingEnabled = true;
			} else if (context == XML_END_TAG_OPEN) {
				fIsBlockingEnabled = false;
			}
			start = yychar;
			textLength = length = yylength();
			if (yy_atEOF) {
				fTokenCount++;
				return null;
			}
		}
		// store the next token
		f_context = primGetNextToken();
		if (f_context == PROXY_CONTEXT) {
			fBufferedEmbeddedContainer = fEmbeddedContainer;
			fShouldLoadBuffered = true;
		} else if (f_context == XML_TAG_NAME) {
			if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
				fCurrentTagName = yytext();
			else
				fCurrentTagName = null;
		} else if (f_context == XML_TAG_OPEN) {
			fIsBlockingEnabled = true;
		} else if (f_context == XML_END_TAG_OPEN) {
			fIsBlockingEnabled = false;
		} else if (f_context == PROXY_UNKNOWN_CONTEXT) {
			fBufferedEmbeddedContainer = fProxyUnknownRegion;
		}
		fBufferedContext = f_context;
		fBufferedStart = yychar;
		fBufferedLength = yylength();
		fShouldLoadBuffered = true;
		if (fBufferedContext == WHITE_SPACE) {
			fShouldLoadBuffered = false;
			length += fBufferedLength;
		}
		if (context == null) {
			// EOF
			if (Debug.debugTokenizer) {
				System.out.println(getClass().getName() + " discovered " + fTokenCount + " tokens."); //$NON-NLS-2$//$NON-NLS-1$
			}
			return null;
		}
		fTokenCount++;
		return fRegionFactory.createToken(context, start, textLength, length, null, fCurrentTagName);
	}
	/* user method */
	public AngularTokenizer(){
		super();
	}
	/* user method */
	public AngularTokenizer(char[] charArray){
			this(new CharArrayReader(charArray));
	}
	/* user method */
	public void reset(char[] charArray) {
		reset(new CharArrayReader(charArray), 0);
	}
	/* user method */
	public void reset(char[] charArray, int newOffset) {
		reset(new CharArrayReader(charArray), newOffset);
	}
	/* user method */
	public void reset(java.io.InputStream in) {
		reset(new java.io.InputStreamReader(in), 0);
	}
	/* user method */
	public void reset(java.io.InputStream in, int newOffset) {
		reset(new java.io.InputStreamReader(in), newOffset);
	}
	/* user method */
	public void reset(java.io.Reader in) {
		reset(in, 0);
	}
	/**
	 * user method *
	 *
	 * Reset internal counters and vars to "newly created" values, in the hopes
	 * that resetting a pre-existing tokenizer is faster than creating a new one.
	 *
	 * This method contains code blocks that were essentially duplicated from the
	 * <em>generated</em> output of this specification before this method was
	 * added.  Those code blocks were under the above copyright.
	 */
	public void reset(java.io.Reader in, int newOffset) {
		if (Debug.debugTokenizer) {
			System.out.println("resetting tokenizer");//$NON-NLS-1$
		}
		fOffset = newOffset;
	
		/* the input device */
		yy_reader = in;
	
		/* the current state of the DFA */
		yy_state = 0;
	
		/* the current lexical state */
		yy_lexical_state = YYINITIAL;
	
		/* this buffer contains the current text to be matched and is
		the source of the yytext() string */
		java.util.Arrays.fill(yy_buffer, (char)0);
	
		/* the textposition at the last accepting state */
		yy_markedPos = 0;
	
		/* the textposition at the last state to be included in yytext */
		yy_pushbackPos = 0;
	
		/* the current text position in the buffer */
		yy_currentPos = 0;
	
		/* startRead marks the beginning of the yytext() string in the buffer */
		yy_startRead = 0;
	
		/** 
		 * endRead marks the last character in the buffer, that has been read
		 * from input 
		 */
		yy_endRead = 0;
	
		/* number of newlines encountered up to the start of the matched text */
		//yyline = 0;
	
		/* the number of characters up to the start of the matched text */
		yychar = 0;
	
		/* yy_atEOF == true <=> the scanner has returned a value for EOF */
		yy_atEOF = false;
	
		/* denotes if the user-EOF-code has already been executed */
		yy_eof_done = false;
	
	
		/* user vars: */
		fTokenCount = 0;
	 
		fShouldLoadBuffered = false;
		fBufferedContext = null;
		fBufferedStart = 1;
		fBufferedLength = 0;
		fStateStack = new IntStack();
	
		fLastInternalBlockStart = -1;
	
		context = null;
		start = 0;
		textLength = 0;
		length = 0;
	
		fEmbeddedContainer = null;
		
		fELlevel = 0;
	}
	/**
	 * user method
	 *
	 */
	public BlockTokenizer newInstance() {
		AngularTokenizer newInstance = new AngularTokenizer();
		// global tagmarkers can be shared; they have no state and 
		// are never destroyed (e.g. 'release')
		for(int i = 0; i < fBlockMarkers.size(); i++) {
			BlockMarker blockMarker = (BlockMarker) fBlockMarkers.get(i);
			if(blockMarker.isGlobal())
				newInstance.addBlockMarker(blockMarker);
		}
		for(int i = 0; i < fNestablePrefixes.size(); i++) {
			TagMarker marker = (TagMarker) fNestablePrefixes.get(i);
			if(marker.isGlobal())
				newInstance.addNestablePrefix(marker);
		}
		return newInstance;
	}
	/* user method */
	private final String scanXMLCommentText() throws IOException {
		// Scan for '-->' and return the text up to that point as
		//   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
		//  case change to the ST_XML_COMMENT_END state and return the next
		//  context as usual.
		return doScan("-->", false, true, true, XML_COMMENT_TEXT, ST_XML_COMMENT_END, ST_XML_COMMENT_END);
	}
	
	/* user method */
	private boolean isAngularTag() {
		return (fContainerTag && fEmbeddedContainer != null) || (fContainerTag && fInTagContainer) || (fEmbeddedTag && fInTagEmbedded);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AngularTokenizer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AngularTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the unpacked transition table
   */
  private static int [] yy_unpack(String packed) {
    int [] trans = new int[12470];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 4184) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return trans;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1374) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) return yy_buffer[yy_currentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (yy_atEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) return YYEOF;

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }

    
  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */
    yy_reader.close();
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }

  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning - from the SED JFlex skeleton
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    try {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[errorCode]);
    }
    catch (ArrayIndexOutOfBoundsException e) {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[YY_UNKNOWN_ERROR]);
    }
    // DO NOT EXIT the VM on an error
    // System.exit(1);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  void yypushback(int number) {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }

	/**
	 * user method - skeleton.sed
	 */
	protected final boolean containsTagName(char[] markerTagName, int offset, int tagnameLength) {
		for(int j = 0; j < fBlockMarkers.size(); j++) {
			BlockMarker marker = (BlockMarker)fBlockMarkers.get(j);
			if(marker.getTagName().length() == tagnameLength) {
				boolean matchesSoFar = true;
				for(int i = 0; i < tagnameLength && matchesSoFar; i++) {
					if(marker.isCaseSensitive()) {
						if(marker.getTagName().charAt(i) != markerTagName[i + offset])
							matchesSoFar = false;
					}
					else {
						if(Character.toLowerCase(marker.getTagName().charAt(i)) != Character.toLowerCase(markerTagName[i + offset]))
							matchesSoFar = false;
					}
				}
				if(matchesSoFar)
					return true;
			}
		}
		return false;
	}

	/**
	 * user method - skeleton.sed
	 *
	 * Return ALL of the regions scannable within the remaining text
	 * Note: for verification use
	 */
	public final List getRegions() {
		List tokens = new ArrayList();
		ITextRegion region = null;
		try {
			region = getNextToken();
			while(region != null) {
				if (region != null) {
					tokens.add(region);
				}
				region = getNextToken();
			}
		}
		catch (StackOverflowError e) {
			Logger.logException(getClass().getName()+": input could not be tokenized correctly at position " + getOffset(), e);//$NON-NLS-1$
			throw e;
		}
		catch (Exception e) {
			// Since this is convenience method and NOT the recommended 
			// way of getting tokens, many errors are simply hidden
			Logger.logException("Exception not handled retrieving regions: " + e.getLocalizedMessage(), e);//$NON-NLS-1$
		}
		return tokens;
	}
	/**
	 * user method - skeleton.sed
	 */
	private final void dump(String s) {
		if (Debug.debugTokenizer) {
			System.out.println(s + " (" + yychar + "-" + //$NON-NLS-2$//$NON-NLS-1$
				(yylength() + yychar) + "):\'" +//$NON-NLS-1$
					StringUtils.escape(yytext()) + "\'");//$NON-NLS-1$
		}
	}
	/* user method  - skeleton.sed */
	public final boolean isEOF() {
		return yy_atEOF;
	}
/* user method - skeleton.sed */
protected final boolean containsTagName(String markerTagName) {
	Iterator blocks = fBlockMarkers.iterator();
	while(blocks.hasNext()) {
		BlockMarker marker = (BlockMarker)blocks.next();
		if(marker.isCaseSensitive()) {
			if(marker.getTagName().equals(markerTagName))
				return true;
		}
		else {
			if(marker.getTagName().equalsIgnoreCase(markerTagName))
				return true;
		}
	}
	return false;
}

  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() {
    if (!yy_eof_done) {
      yy_eof_done = true;
    // do nothing, this is the downstream parser's job

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String primGetNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;


    while (true) {

      yychar+= yylength();

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {
    
          yy_input = yy_advance();

          if ( yy_input == YYEOF ) break yy_forAction;

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state; 
            yy_markedPos = yy_currentPos; 
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {    

        case 143: 
        case 240: 
          {  /* ANGULAR attribute values have escape semantics */
	if(Debug.debugTokenizer)
		dump("jsp attr value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
	yybegin(ST_XML_ATTRIBUTE_NAME);
	return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 327: break;
        case 96: 
        case 194: 
          {  /* only allow for non-ANGULAR tags for this does not obey ANGULAR quoting rules */
	if(Debug.debugTokenizer)
		dump("attr value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 328: break;
        case 325: 
          { 
	if(Debug.debugTokenizer)
		dump("XSL processing instruction target");//$NON-NLS-1$
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 329: break;
        case 317: 
        case 319: 
        case 320: 
          { 
	if(Debug.debugTokenizer)
		dump("\nCDATA start");//$NON-NLS-1$
	fStateStack.push(yystate());
	yybegin(ST_CDATA_TEXT);
	return XML_CDATA_OPEN;
 }
        case 330: break;
        case 310: 
          { 
	if(Debug.debugTokenizer)
		dump("element");//$NON-NLS-1$
	yybegin(ST_XML_ELEMENT_DECLARATION);
	return XML_ELEMENT_DECLARATION;
 }
        case 331: break;
        case 309: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist");//$NON-NLS-1$
	yybegin(ST_XML_ATTLIST_DECLARATION);
	return XML_ATTLIST_DECLARATION;
 }
        case 332: break;
        case 308: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_DECLARATION);
	return XML_DOCTYPE_DECLARATION;
 }
        case 333: break;
        case 303: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	fEmbeddedHint = XML_DOCTYPE_EXTERNAL_ID_PUBREF;
	yybegin(ST_XML_DOCTYPE_ID_PUBLIC);
	return XML_DOCTYPE_EXTERNAL_ID_PUBLIC;
 }
        case 334: break;
        case 302: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	fEmbeddedHint = XML_DOCTYPE_EXTERNAL_ID_SYSREF;
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_SYSTEM;
 }
        case 335: break;
        case 298: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 336: break;
        case 272: 
          { 
	if(Debug.debugTokenizer)
		dump("\nCharRef");//$NON-NLS-1$
	return XML_CHAR_REFERENCE;
 }
        case 337: break;
        case 269: 
          { 
	if(Debug.debugTokenizer)
		dump("\ncomment start");//$NON-NLS-1$
	fEmbeddedHint = XML_COMMENT_TEXT;
	fEmbeddedPostState = ST_XML_COMMENT;
	yybegin(ST_XML_COMMENT);
	return XML_COMMENT_OPEN;
 }
        case 338: break;
        case 253: 
        case 254: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 339: break;
        case 252: 
          { 
	if(Debug.debugTokenizer)
		dump("comment end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	yybegin(YYINITIAL);
	return XML_COMMENT_CLOSE;
 }
        case 340: break;
        case 251: 
          { 
	if(Debug.debugTokenizer)
		dump("CDATA end");//$NON-NLS-1$
	yybegin(fStateStack.pop());
	return XML_CDATA_CLOSE;
 }
        case 341: break;
        case 250: 
          { 
	if(Debug.debugTokenizer)
		dump("\nPEReference");//$NON-NLS-1$
	return XML_PE_REFERENCE;
 }
        case 342: break;
        case 247: 
          { 
	if(Debug.debugTokenizer)
		dump("\nEntityRef");//$NON-NLS-1$
	return XML_ENTITY_REFERENCE;
 }
        case 343: break;
        case 242: 
          { 
	if (Debug.debugTokenizer) {
		System.out.println("begin embedded region: " + fEmbeddedHint+", genericEndTagOpen");//$NON-NLS-1$
	}
	int incomingState = yystate();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	if(Debug.debugTokenizer)
		dump("ANGULAR attribute value start - end tag");//$NON-NLS-1$
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedContainer(XML_END_TAG_OPEN, new String[]{XML_TAG_CLOSE,XML_EMPTY_TAG_CLOSE});
	if(yystate() != ST_ABORT_EMBEDDED)
        yybegin(incomingState);
	return PROXY_CONTEXT;
 }
        case 344: break;
        case 201: 
        case 211: 
        case 218: 
          { 
	return XML_DOCTYPE_INTERNAL_SUBSET;
 }
        case 345: break;
        case 192: 
          { 
	String tagName = yytext().substring(1);
	// pushback to just after the opening bracket
	yypushback(yylength() - 1);
	/*
	 * If this tag can not be nested or we're already searching for an
	 * attribute name, equals, or value, return immediately.
	 */
	if (!isNestable(tagName) || (!fStateStack.empty() && (fStateStack.peek() == ST_XML_ATTRIBUTE_NAME || fStateStack.peek() == ST_XML_EQUALS || fStateStack.peek() == ST_XML_ATTRIBUTE_VALUE || fStateStack.peek() == ST_ANGULAR_ATTRIBUTE_VALUE))) {
		yybegin(ST_XML_TAG_NAME);
		return XML_TAG_OPEN;
	}
	if(Debug.debugTokenizer)
		dump("tag in place of attr value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	fStateStack.push(yystate());
	// embedded container should be looking for the name (again) next
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedTagSequence(XML_TAG_OPEN, tagName); // ?
	fStateStack.pop();
	yybegin(ST_XML_ATTRIBUTE_NAME);
	return PROXY_CONTEXT;
 }
        case 346: break;
        case 190: 
          { 
	String tagName = yytext().substring(1);
	// pushback to just after the opening bracket
	yypushback(yylength() - 1);
	/*
	 * If this tag can not be nested or we're already searching for an
	 * attribute name, equals, or value, return immediately.
	 */
	if (!isNestable(tagName) || (!fStateStack.empty() && (fStateStack.peek() == ST_XML_ATTRIBUTE_NAME || fStateStack.peek() == ST_XML_EQUALS || fStateStack.peek() == ST_XML_ATTRIBUTE_VALUE || fStateStack.peek() == ST_ANGULAR_ATTRIBUTE_VALUE || fStateStack.peek() == ST_XML_ATTRIBUTE_VALUE_DQUOTED || fStateStack.peek() == ST_XML_ATTRIBUTE_VALUE_SQUOTED))) {
		yybegin(ST_XML_TAG_NAME);
		return XML_TAG_OPEN;
	}
	if(Debug.debugTokenizer)
		dump("tag in place of attr name");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	fStateStack.push(yystate());
	// embedded container should be looking for the name (again) next
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedTagSequence(XML_TAG_OPEN, tagName); // ?
	fStateStack.pop();
	yybegin(ST_XML_EQUALS);
	return PROXY_CONTEXT;
 }
        case 347: break;
        case 189: 
          { 
        yybegin(YYINITIAL);
	fEmbeddedHint = UNDEFINED;
	if(Debug.debugTokenizer)
		dump("empty tag close");//$NON-NLS-1$

	if (fEmbeddedContainer != null)
		fInTagEmbedded = false;
	else
		fInTagContainer = false;

	return XML_EMPTY_TAG_CLOSE;
 }
        case 348: break;
        case 188: 
          { 
	if(Debug.debugTokenizer)
		dump("ANGULAR end");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return ANGULAR_EXPRESSION_CLOSE;
 }
        case 349: break;
        case 173: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 350: break;
        case 172: 
          { 
		// ended with nothing inside
		fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 351: break;
        case 168: 
          { 
	if(Debug.debugTokenizer)
		dump("processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 352: break;
        case 164: 
        case 178: 
        case 187: 
        case 212: 
        case 219: 
        case 226: 
        case 228: 
        case 235: 
        case 237: 
          { 
	/* ANGULAR scriptlet begun (anywhere)
	 * A consequence of the start anywhere possibility is that the
	 *  incoming state must be checked to see if it's erroneous
	 *  due to the order of precedence generated
	 */
	// begin sanity checks
	if(yystate() == ST_ANGULAR_EXPRESSION_CONTENT) {
		// at the beginning?!
		yypushback(1);
		return ANGULAR_EXPRESSION_CONTENT;
	}
	else if(yystate() == ST_BLOCK_TAG_SCAN) {
		yypushback(2);
		return doBlockTagScan();
	}
	else if(yystate() == ST_XML_COMMENT) {
		yypushback(2);
		return scanXMLCommentText();
	}
	
	// finished sanity checks
	fStateStack.push(yystate());
	if(fStateStack.peek()==YYINITIAL) {
		// the simple case, just a regular scriptlet out in content
		if(Debug.debugTokenizer)
			dump("\nANGULAR scriptlet start");//$NON-NLS-1$
		yybegin(ST_ANGULAR_EXPRESSION_CONTENT);
		return ANGULAR_EXPRESSION_OPEN;
	}
	else {
		if (Debug.debugTokenizer) {
			System.out.println("begin embedded region: " + fEmbeddedHint+", jspScriptletStart");//$NON-NLS-1$
		}
		if(Debug.debugTokenizer)
			dump("ANGULAR scriptlet start");//$NON-NLS-1$
		if(yystate() == ST_XML_ATTRIBUTE_VALUE_DQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE_SQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
		else if(yystate() == ST_CDATA_TEXT) {
			fEmbeddedPostState = ST_CDATA_TEXT;
			fEmbeddedHint = XML_CDATA_TEXT;
		}
		yybegin(ST_ANGULAR_EXPRESSION_CONTENT);
		assembleEmbeddedContainer(ANGULAR_EXPRESSION_OPEN, ANGULAR_EXPRESSION_CLOSE);
		if(yystate() == ST_BLOCK_TAG_INTERNAL_SCAN) {
			yybegin(ST_BLOCK_TAG_SCAN);
			return BLOCK_TEXT;
		}
		// required help for successive embedded regions
		if(yystate() == ST_XML_TAG_NAME) {
			fEmbeddedHint = XML_TAG_NAME;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		else if((yystate() == ST_XML_ATTRIBUTE_NAME || yystate() == ST_XML_EQUALS)) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
			fEmbeddedPostState = ST_XML_EQUALS;
		}
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
        else if(yystate() == ST_ANGULAR_ATTRIBUTE_VALUE) {
            fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
            fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        }
		
		return PROXY_CONTEXT;
	}
 }
        case 353: break;
        case 158: 
          { 
	fStateStack.push(yystate());
	if(Debug.debugTokenizer)
		dump("\ndeclaration start");//$NON-NLS-1$
        yybegin(ST_XML_DECLARATION);
	return XML_DECLARATION_OPEN;
 }
        case 354: break;
        case 157: 
          { 
	if(Debug.debugTokenizer)
		dump("\nprocessing instruction start");//$NON-NLS-1$
	yybegin(ST_PI);
        return XML_PI_OPEN;
 }
        case 355: break;
        case 156: 
          { 
	if(Debug.debugTokenizer)
		dump("\nend tag open");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_TAG_NAME);
        return XML_END_TAG_OPEN;
 }
        case 356: break;
        case 155: 
          { 
	return isAngularTag()? ANGULAR_TAG_ATTRIBUTE_VALUE_DQUOTE : XML_TAG_ATTRIBUTE_VALUE_DQUOTE;
 }
        case 357: break;
        case 151: 
          { 
	return isAngularTag() ? ANGULAR_TAG_ATTRIBUTE_VALUE_SQUOTE : XML_TAG_ATTRIBUTE_VALUE_SQUOTE;
 }
        case 358: break;
        case 149: 
          { 
	if (Debug.debugTokenizer) {
		System.out.println("begin embedded region: " + fEmbeddedHint+", genericTagOpen");//$NON-NLS-1$
	}
	int incomingState = yystate();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	if(Debug.debugTokenizer)
		dump("tag inside of ANGULAR attribute value start");//$NON-NLS-1$
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedContainer(XML_TAG_OPEN, new String[]{XML_TAG_CLOSE,XML_EMPTY_TAG_CLOSE});
	if(yystate() != ST_ABORT_EMBEDDED)
        yybegin(incomingState);
	return PROXY_CONTEXT;
 }
        case 359: break;
        case 148: 
        case 152: 
        case 153: 
          { 
	return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 360: break;
        case 138: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist close");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 361: break;
        case 131: 
        case 135: 
        case 231: 
        case 234: 
        case 266: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist name");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	fEmbeddedPostState = YYINITIAL;
	yybegin(ST_XML_ATTLIST_DECLARATION_CONTENT);
	return XML_ATTLIST_DECL_NAME;
 }
        case 362: break;
        case 74: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 363: break;
        case 67: 
        case 69: 
        case 72: 
        case 176: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction attribute value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 364: break;
        case 66: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction '='");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_PI_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 365: break;
        case 65: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_XML_PI_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 366: break;
        case 60: 
        case 61: 
        case 62: 
        case 63: 
          { 
		// block scan until close is found
	return doScan("?>", false, false, false, XML_PI_CONTENT, ST_XML_PI_TAG_CLOSE, ST_XML_PI_TAG_CLOSE);
 }
        case 367: break;
        case 59: 
          { 
        yybegin(ST_PI_CONTENT);
        return WHITE_SPACE;
 }
        case 368: break;
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 169: 
        case 170: 
        case 171: 
        case 255: 
        case 274: 
        case 275: 
        case 287: 
        case 288: 
        case 297: 
        case 307: 
        case 314: 
        case 318: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
          { 
	if(Debug.debugTokenizer)
		dump("processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_CONTENT;
        yybegin(ST_PI_WS);
        return XML_TAG_NAME;
 }
        case 369: break;
        case 49: 
        case 50: 
        case 51: 
          { 
	if(Debug.debugTokenizer)
		dump("comment content");//$NON-NLS-1$
	return scanXMLCommentText();
 }
        case 370: break;
        case 47: 
          { 
	if(Debug.debugTokenizer)
		dump("LINE FEED");//$NON-NLS-1$
	return WHITE_SPACE;
 }
        case 371: break;
        case 0: 
        case 36: 
        case 39: 
        case 160: 
        case 162: 
        case 163: 
        case 245: 
        case 246: 
        case 271: 
          { 
	if(Debug.debugTokenizer)
		dump("\nXML content");//$NON-NLS-1$
	return XML_CONTENT;
 }
        case 372: break;
        case 5: 
        case 8: 
        case 9: 
        case 10: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 29: 
        case 33: 
        case 34: 
        case 35: 
        case 54: 
        case 150: 
        case 154: 
          { 
	if(Debug.debugTokenizer)
		dump("white space");//$NON-NLS-1$
        return WHITE_SPACE;
 }
        case 373: break;
        case 17: 
        case 87: 
          { 
	if(Debug.debugTokenizer)
		dump("inappropriate tag name");//$NON-NLS-1$
	if(!fStateStack.empty() && (fStateStack.peek()==ST_XML_ATTRIBUTE_VALUE_SQUOTED||fStateStack.peek()==ST_XML_ATTRIBUTE_VALUE_DQUOTED)) {
		yybegin(ST_ABORT_EMBEDDED);
		char c = yy_buffer[yy_markedPos - 1];
		if (fStateStack.peek()==ST_XML_ATTRIBUTE_VALUE_DQUOTED && c == '\"') {
			return isAngularTag() ? ANGULAR_TAG_ATTRIBUTE_VALUE_DQUOTE : XML_TAG_ATTRIBUTE_VALUE_DQUOTE;
		}		
		if (fStateStack.peek()==ST_XML_ATTRIBUTE_VALUE_SQUOTED && c == '\'') {
			return isAngularTag() ? ANGULAR_TAG_ATTRIBUTE_VALUE_SQUOTE : XML_TAG_ATTRIBUTE_VALUE_SQUOTE;
		}
		yypushback(yylength()-1);
		return XML_TAG_ATTRIBUTE_VALUE;
	}
	yybegin(YYINITIAL);
        return XML_CONTENT;
 }
        case 374: break;
        case 28: 
        case 127: 
        case 128: 
        case 130: 
        case 227: 
        case 265: 
        case 283: 
        case 294: 
        case 304: 
        case 311: 
        case 315: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl contentspec");//$NON-NLS-1$
	return XML_ELEMENT_DECL_CONTENT;
 }
        case 375: break;
        case 30: 
        case 136: 
        case 137: 
        case 139: 
        case 236: 
        case 268: 
        case 285: 
        case 295: 
        case 305: 
        case 312: 
        case 316: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist contentspec");//$NON-NLS-1$
	return XML_ATTLIST_DECL_CONTENT;
 }
        case 376: break;
        case 37: 
        case 88: 
        case 93: 
        case 101: 
          { 
	if(Debug.debugTokenizer)
		dump("\nstart tag open");//$NON-NLS-1$
	if (!fStateStack.empty() && fStateStack.peek()== ST_XML_COMMENT){
		fStateStack.pop();
		fEmbeddedHint = XML_COMMENT_TEXT;
		yybegin(ST_XML_TAG_NAME);
		String tagName = "";
		assembleEmbeddedTagSequence(XML_TAG_OPEN, tagName); // ?
		return PROXY_CONTEXT;
	}
	fEmbeddedHint = XML_TAG_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_TAG_NAME);
        return XML_TAG_OPEN;
 }
        case 377: break;
        case 38: 
        case 40: 
        case 44: 
        case 45: 
        case 46: 
        case 48: 
        case 52: 
        case 53: 
        case 64: 
        case 68: 
        case 70: 
        case 71: 
        case 73: 
        case 75: 
        case 79: 
        case 90: 
        case 98: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 108: 
        case 109: 
        case 111: 
        case 112: 
        case 113: 
        case 117: 
        case 118: 
        case 119: 
        case 123: 
        case 124: 
        case 125: 
        case 132: 
        case 133: 
        case 134: 
        case 144: 
        case 145: 
          { 
	if (Debug.debugTokenizer)
		System.out.println("!!!unexpected!!!: \"" + yytext() + "\":" + //$NON-NLS-2$//$NON-NLS-1$
			yychar + "-" + (yychar + yylength()));//$NON-NLS-1$
	return UNDEFINED;
 }
        case 378: break;
        case 41: 
        case 42: 
        case 43: 
          { 
	if(Debug.debugTokenizer)
		dump("CDATA text");//$NON-NLS-1$
	fEmbeddedPostState = ST_CDATA_TEXT;
	fEmbeddedHint = XML_CDATA_TEXT;
	String returnedContext = doScan("]]>", false, true, true, XML_CDATA_TEXT, ST_CDATA_END,  ST_CDATA_END);//$NON-NLS-1$
	if(returnedContext == XML_CDATA_TEXT)
		yybegin(ST_CDATA_END);
	return returnedContext;
 }
        case 379: break;
        case 76: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_DHTML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 380: break;
        case 77: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction '='");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_DHTML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 381: break;
        case 78: 
        case 80: 
        case 81: 
        case 82: 
        case 184: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction attribute value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 382: break;
        case 83: 
        case 84: 
        case 85: 
        case 86: 
          { 
	if(Debug.debugTokenizer)
		dump("ANGULAR code content");//$NON-NLS-1$
	return doScan("}", false, false, false, ANGULAR_EXPRESSION_CONTENT, ST_ANGULAR_EXPRESSION_CONTENT, ST_ANGULAR_EXPRESSION_CONTENT);
 }
        case 383: break;
        case 89: 
          { 
	if(Debug.debugTokenizer)
		dump("tag close");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	if(isBlockMarker()) {
		fEmbeddedHint = getBlockMarkerContext();
		fEmbeddedPostState = ST_BLOCK_TAG_SCAN;
        	yybegin(ST_BLOCK_TAG_SCAN);
	}
	else
        	yybegin(YYINITIAL);

	if (fEmbeddedContainer != null)
		fInTagEmbedded = false;
	else
		fInTagContainer = false;

	return XML_TAG_CLOSE;
 }
        case 384: break;
        case 91: 
        case 92: 
          { 
	if(Debug.debugTokenizer)
		dump("tag name");//$NON-NLS-1$
    String tagname = yytext();
    boolean jspTag = tagname.indexOf(':') != -1;
	if (fEmbeddedContainer != null) {
    	fEmbeddedTag = jspTag;
		fInTagEmbedded = true;
    }
	else {
		fContainerTag = jspTag;
		fInTagContainer = true;
	}
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 385: break;
        case 94: 
          { 
	if(Debug.debugTokenizer)
		dump("attr name");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 386: break;
        case 95: 
          { 
	if(Debug.debugTokenizer)
		dump("equals");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(isAngularTag() ? ST_ANGULAR_ATTRIBUTE_VALUE : ST_XML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 387: break;
        case 97: 
          { 
	if (Debug.debugTokenizer) {
		System.out.println("begin embedded region: " + fEmbeddedHint+", unquoted genericTagOpen");//$NON-NLS-1$
	}
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	fStateStack.push(yystate());
	if(Debug.debugTokenizer)
		dump("ANGULAR tag embedded name start - start tag");//$NON-NLS-1$
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedContainer(XML_TAG_OPEN, new String[]{XML_TAG_CLOSE,XML_EMPTY_TAG_CLOSE});
	fStateStack.pop();
        yybegin(ST_XML_ATTRIBUTE_NAME);
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
	return PROXY_CONTEXT;
 }
        case 388: break;
        case 99: 
        case 146: 
          { 
	String type = yy_lexical_state == ST_XML_ATTRIBUTE_VALUE ? XML_TAG_ATTRIBUTE_VALUE_DQUOTE : ANGULAR_TAG_ATTRIBUTE_VALUE_DQUOTE;

	if (Debug.debugTokenizer) {
		System.out.println("begin embedded region: " + fEmbeddedHint+", "+type);//$NON-NLS-1$
	}
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
	yybegin(ST_XML_ATTRIBUTE_VALUE_DQUOTED);
	fStateStack.push(yystate());
	if(Debug.debugTokenizer)
		dump("ANGULAR attribute value start - complex double quoted");//$NON-NLS-1$
	assembleEmbeddedContainer(type, type);
	fStateStack.pop();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
	yybegin(ST_XML_ATTRIBUTE_NAME);
	if (fEmbeddedContainer.getLastRegion().getType() == UNDEFINED) {
		fProxyUnknownRegion = fRegionFactory.createToken(XML_TAG_ATTRIBUTE_VALUE, fEmbeddedContainer.getStart(), fEmbeddedContainer.getTextLength(), fEmbeddedContainer.getLength());
		return PROXY_UNKNOWN_CONTEXT;
	}
	return PROXY_CONTEXT;
 }
        case 389: break;
        case 100: 
        case 147: 
          { 
	String type = yy_lexical_state == ST_XML_ATTRIBUTE_VALUE ? XML_TAG_ATTRIBUTE_VALUE_SQUOTE : ANGULAR_TAG_ATTRIBUTE_VALUE_SQUOTE;
	if (Debug.debugTokenizer) {
		System.out.println("begin embedded region: " + fEmbeddedHint+", "+type);//$NON-NLS-1$
	}
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
	yybegin(ST_XML_ATTRIBUTE_VALUE_SQUOTED);
	fStateStack.push(yystate());
	if(Debug.debugTokenizer)
		dump("ANGULAR attribute value start - complex single quoted");//$NON-NLS-1$
	assembleEmbeddedContainer(type, type);
	fStateStack.pop();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
    if (fEmbeddedContainer.getLastRegion().getType() == UNDEFINED) {
		fProxyUnknownRegion = fRegionFactory.createToken(XML_TAG_ATTRIBUTE_VALUE, fEmbeddedContainer.getStart(), fEmbeddedContainer.getTextLength(), fEmbeddedContainer.getLength());
		return PROXY_UNKNOWN_CONTEXT;
	}
	return PROXY_CONTEXT;
 }
        case 390: break;
        case 102: 
          { 
	if(Debug.debugTokenizer)
		dump("declaration end");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 391: break;
        case 107: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype type");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_EXTERNAL_ID);
	return XML_DOCTYPE_NAME;
 }
        case 392: break;
        case 110: 
        case 114: 
        case 115: 
        case 206: 
        case 209: 
        case 261: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype public reference");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	fEmbeddedPostState = YYINITIAL;
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_PUBREF;
 }
        case 393: break;
        case 116: 
        case 120: 
        case 121: 
        case 215: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype system reference");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	fEmbeddedPostState = YYINITIAL;
	yybegin(ST_XML_DECLARATION_CLOSE);
	return XML_DOCTYPE_EXTERNAL_ID_SYSREF;
 }
        case 394: break;
        case 122: 
        case 126: 
        case 222: 
        case 225: 
        case 263: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl name");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	fEmbeddedPostState = YYINITIAL;
	yybegin(ST_XML_ELEMENT_DECLARATION_CONTENT);
	return XML_ELEMENT_DECL_NAME;
 }
        case 395: break;
        case 129: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl close");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 396: break;
        case 140: 
        case 141: 
        case 142: 
          { 
		return doBlockTagScan();
	 }
        case 397: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }    


}
